자동화 도구


ansible의 구성요소

1. ansible 본체 > ssh를 이용하여 인벤토리 목록에 있는 노드들에게 명령을 전달
2. 인벤토리 > 앤서블 본체로부터 명령을 전달받아 서비스를 배포하는 역할을 하는 서버
이 서버들의 목록을 인벤토리라고 하며 대표적으로 두가지 방법을 이용하여 인벤토리를  관리
- ansible본체 내부에 /etc/ansible/hosts 파일에 작성
-별도의 인벤토리 파일을 만들고 해당 파일 내에 목록을 작성
이후 앤서블 플레이북에서 애플리케이션 배포시 이 목록을 불러온다.

앤서블 > "특정 서버들에게 웹서비스를 배포하라"

인벤토리 > 특정 서버들에게
앤서블 플레이북 > 웹서비스를 배포하라

모듈



wokd > 설치후 웹브라우저에서 ip:8001로 접속가능

vagrant : 디렉토리단위로 작업이된다.
인프라를 자동화 도구를 이용하여 일괄적으로 생성하는 도구

Vagrantfile


vi Vagrantfile
----------------------------------------------
Vagrant.configure("2") do |config|
 > vagrant 버전 2를사용해서 작업을 시작
config.vm.box = "base"
end
-----------------------------------------------

Vagrant.configure("2") do |config|
  config.vm.define  "ansible-server" do |cfg| >  ansible-server에 대한 내용
    cfg.vm.box = "centos/7" > centos 7 이미지를 가져다가 사용
    cfg.vm.host_name = "ansible-server"
    cfg.vm.network "private_network", ip: "172.16.1.10" > 네트워크의 타입과 IP를 결정 
    ( private_network는 외부와 연결되지않은 네트워크, 외부 네트워크를 설정하지않으면 기본으로 생성되어있는  vagrant-libvirtd 가 붙는다)
    cfg.vm.network "forwarded_port", guest: 22, host: 60010, auto_correct: true, id: "ssh"
    > 호스트의 IP를 이용한 포트포워딩기능을 설정 
    cfg.vm.synced_folder "../data", "vagrant", disabled: true > vagrant의 디렉토리와 가상머신의 디렉토리를 마운트 하는 기능 (disabled 되어있음)
    cfg.vm.provision "shell", inline: "yum -y install epel-release"
    cfg.vm.provision "shell", inline: "yum -y install ansible"
  end
end



vagrant up >  Vagrantfile을 읽고 인프라를 생성
vagrant up --provision 또는 vagrant provision을 실행하면
Vagrantfile내에서 provision 부분만 실행한다.


[실습] - vagrant를 사용하여 앤서블 사용을 위한 kvm인스턴스 생성

mkdir test3; cd test3 

vagrant init

vi Vagrantfile
-------------------------------------------------------------------------------------------------------------------
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
##############Ansible node01######################
  config.vm.define "ansible-node01" do |config1|
    config1.vm.box = "generic/centos7"
    config1.vm.host_name = "ansible-node01"
    config1.vm.network "private_network", type: "dhcp"
    config1.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 172.16.1.11 netmask 255.255.255.0 up"
    config1.vm.provision "shell", inline: "ifconfig eth1 down"
    config1.vm.provision "shell", inline: "ifconfig eth1 up"
    config1.vm.network "forwarded_port", guest: 22, host: 60011, auto_correct: true, id: "ssh"
  end
##############Ansible node02######################
  config.vm.define "ansible-node02" do |config2|
    config2.vm.box = "generic/centos7"
    config2.vm.host_name = "ansible-node02"
    config2.vm.network "private_network", type: "dhcp"
    config2.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 172.16.1.12 netmask 255.255.255.0 up"
    config2.vm.provision "shell", inline: "ifconfig eth1 down"
    config2.vm.provision "shell", inline: "ifconfig eth1 up"
    config2.vm.network "forwarded_port", guest: 22, host: 60012, auto_correct: true, id: "ssh"
  end
##############Ansible server######################
  config.vm.define "ansible-server" do |config0|
    config0.vm.box = "generic/centos7"
    config0.vm.host_name = "ansible-server"
    config0.vm.network "private_network", type: "dhcp"
    config0.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 172.16.1.10 netmask 255.255.255.0 up"
    config0.vm.provision "shell", inline: "ifconfig eth1 down"
    config0.vm.provision "shell", inline: "ifconfig eth1 up"
    config0.vm.network "forwarded_port", guest: 22, host: 60010, auto_correct: true, id: "ssh"
    config0.vm.synced_folder "../data", "vagrant", disabled: true
    config0.vm.provision "shell", inline: "yum install -y epel-release"
    config0.vm.provision "shell", inline: "yum install -y ansible"
  end
end
-------------------------------------------------------------------------------------------------------------------


[root@ansible test3]# virsh list
 Id    Name                           State
----------------------------------------------------
 8     test3_ansible-server           running
 9     test3_ansible-node01           running
 10    test3_ansible-node02           running

[root@ansible test3]# virsh domifaddr test3_ansible-server
 Name       MAC address          Protocol     Address
------------------------------------------------------------                              -------------------
 vnet0      52:54:00:2b:50:65    ipv4         192.168.121.35                              /24
 vnet1      52:54:00:ff:7e:ce    ipv4         172.28.128.14/                              24

[root@ansible test3]# virsh domifaddr test3_ansible-server
 Name       MAC address          Protocol     Address
-------------------------------------------------------------------------------
 vnet0      52:54:00:2b:50:65    ipv4         192.168.121.35/24
 vnet1      52:54:00:ff:7e:ce    ipv4         172.28.128.14/24

[root@ansible test3]# virsh domifaddr test3_ansible-node01
 Name       MAC address          Protocol     Address
-------------------------------------------------------------------------------
 vnet2      52:54:00:72:64:fa    ipv4         192.168.121.83/24
 vnet3      52:54:00:de:b4:e7    ipv4         172.28.128.66/24

[root@ansible test3]# virsh domifaddr test3_ansible-node02
 Name       MAC address          Protocol     Address
-------------------------------------------------------------------------------
 vnet4      52:54:00:6e:e0:ce    ipv4         192.168.121.108/24
 vnet5      52:54:00:c0:ae:3c    ipv4         172.28.128.177/24

[root@ansible test3]# vagrant ssh ansible-server

ip ad 를 보면 172.16.1.0 대역의 고정아이피와 dhcp로 받아온 172.28 대역의 아이피 
두개가 할당되어있음



ping 172.16.1.11
ping 172.16.1.12


[실습] - 공개키를 자동으로 추가시켜 바로 ansible을 사용할수 있도록 설정하기

vi Vagrantfile
-------------------------------------------------------------------------------------------------------------------
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
##############Ansible node01######################
  config.vm.define "ansible-node01" do |config1|
    config1.vm.box = "generic/centos7"
    config1.vm.host_name = "ansible-node01"
    config1.vm.network "private_network", type: "dhcp"
    config1.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 172.16.1.11 netmask 255.255.255.0 up"
    config1.vm.provision "shell", inline: "ifconfig eth1 down"
    config1.vm.provision "shell", inline: "ifconfig eth1 up"
    config1.vm.provision "shell", inline: "sed -i 's/PasswordAuthentication\ no/PasswordAuthentication\ yes/g' /etc/ssh/sshd_config"
    config1.vm.provision "shell", inline: "systemctl restart sshd"
    config1.vm.network "forwarded_port", guest: 22, host: 60011, auto_correct: true, id: "ssh"
  end
##############Ansible node02######################
  config.vm.define "ansible-node02" do |config2|
    config2.vm.box = "generic/centos7"
    config2.vm.host_name = "ansible-node02"
    config2.vm.network "private_network", type: "dhcp"
    config2.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 172.16.1.12 netmask 255.255.255.0 up"
    config2.vm.provision "shell", inline: "ifconfig eth1 down"
    config2.vm.provision "shell", inline: "ifconfig eth1 up"
    config2.vm.provision "shell", inline: "sed -i 's/PasswordAuthentication\ no/PasswordAuthentication\ yes/g' /etc/ssh/sshd_config"
    config2.vm.provision "shell", inline: "systemctl restart sshd"
    config2.vm.network "forwarded_port", guest: 22, host: 60012, auto_correct: true, id: "ssh"
  end
##############Ansible server######################
  config.vm.define "ansible-server" do |config0|
    config0.vm.box = "generic/centos7"
    config0.vm.host_name = "ansible-server"
    config0.vm.network "private_network", type: "dhcp"
    config0.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 172.16.1.10 netmask 255.255.255.0 up"
    config0.vm.provision "shell", inline: "ifconfig eth1 down"
    config0.vm.provision "shell", inline: "ifconfig eth1 up"
    config0.vm.network "forwarded_port", guest: 22, host: 60010, auto_correct: true, id: "ssh"
    config0.vm.synced_folder "../data", "vagrant", disabled: true
    config0.vm.provision "shell", inline: "yum install -y epel-release"
    config0.vm.provision "shell", inline: "yum install -y ansible"
    config0.vm.provision "shell", inline: "yum install -y ansible"
    config0.vm.provision "file", source: "ansible_test.yml", destination: "ansible_test.yml"
    config0.vm.provision "shell", inline: "ansible-playbook ansible_test.yml"
  end
end

--------------------------------------------------------------------------------------------------------------------


vi add_ssh.sh
---------------------------------------------------------------------------------------------
sshpass -p vagrant ssh -T -o StrictHostKeyChecking=no vagrant@172.16.1.11
sshpass -p vagrant ssh -T -o StrictHostKeyChecking=no vagrant@172.16.1.12
---------------------------------------------------------------------------------------------

[root@ansible test3]# vi ansible_test.yml
---------------------------------------------------------------------------------------------
---
 - name: Test Playbook
   hosts: localhost
   become: yes
   gather_facts: no
   tasks:
     - name: install tools
       yum:
         name: git
         state: present

     - name: install sshpass
       yum:
         name: sshpass
         state: present

     - name: install web
       yum:
         name: httpd
         state: present

     - name: start web
       service:
         name: httpd
         state: started

     - name: drop firewalld
       service:
         name: firewalld
         state: stopped
---------------------------------------------------------------------------------------------

vagrant up

vagrant ssh ansible-server

vi /etc/ansible/hosts
-------------------------
[centos]
172.16.1.11
172.16.1.12

[web]
172.16.1.11

[db]
172.16.1.12

[seoul]
172.16.1.11
172.16.1.12
------------------------------

ansible all -m ping -k 


vim ansible_playbook.yml
------------------------------
---
  - name: install web
    hosts: web
    become: yes
    gather_facts: no
    tasks:
      - name: install tools
        yum:
          name: httpd
          state: present
      - name: start httpd
        service:
          name: httpd
          state: started

  - name: install db
    hosts: db
    become: yes
    gather_facts: no
    tasks:
      - name: install db
        yum:
          name: mariadb-server
          state: present
------------------------------

ansible-playbook ansible_playbook.yml -kbstar


vi ansible_test.yml
------------------------------
---
 - name: Test Playbook
   hosts: localhost
   become: yes
   gather_facts: no
   tasks:
     - name: install tools
       yum:
         name: git
         state: present

     - name: install sshpass
       yum:
         name: sshpass
         state: present

     - name: install web
       yum:
         name: httpd
         state: present

     - name: start web
       service:
         name: httpd
         state: started

     - name: drop firewalld
       service:
         name: firewalld
         state: stopped
------------------------------

ansible-playbook ansible_test.yml


vim ansible_test2.yml
------------------------------
---
 - name: Test Playbook
   hosts: seoul
   become: yes
   gather_facts: no
   tasks:

     - name: install web
       yum:
         name: httpd
         state: present

     - name: copy index.html
       copy:
         src: index.html
         dest: /var/www/html/index.html

     - name: start web
       service:
         name: httpd
         state: started
         enabled: true

     - name: drop firewalld
       service:
         name: firewalld
         state: stopped
         enabled: false
------------------------------

curl https://www.nginx.com > index.html 

ansible-playbook ansible_test2.yml

exit
startx
virsh domifaddr test3-ansible-node01
virsh domifaddr test3-ansible-node01

웹브라우저에서 
퍼블릭아이피를 사용해서 웹서버의 동작을 확인

Ansible Vs Terraform
VM을 배포, 수정, 삭제 가 가능한가 ( vm life cycle 관리)
Terraform : 가능함
ansible : 부분적으로가능 (Vagrant를 이용하여 로컬/on-promise에 VM등을 배포한뒤 이를 이용)
              AWS의 EC2의 경우에는 모듈을 이용하여 생성이가능 > Vagrant없이 가능
