##firewall##
1 세대 :  
방화벽 vpn > L3~L4 (IP/tcp/udp/routing protocol) 
IPS/IDS > IPS : 침입 방지장치(protection) IDS : 침입 탐지장치(detection)  Application  5~7계층 문제
NMS > Network Monitering system (MRTG, PRTG, ZABBIX, CACTI GRAFANA) 네트워크 모니터링에대한 리포팅 가능
WAF > Web Application Firewall (웹방화벽) 주로 웹서버를 보호하기 위한 목적
		각 프로그래밍언어에 대한 secure코딩이 포함되어있음 ex) mod security

2세대 : 통합 보안장비 (UTM) > Base=방화벽 ex)ASA

-방화벽
주로 L3 ~L4 필터링

-ASA 
L3~L4 필터링뿐아니라, 라우팅 기능이나 다른 기능들이 있음
빈 슬롯이 있어서 IPS나 다른 모듈들을 설치가 가능

3세대 : NGFW (차세대 방화벽) 컨텐츠에 대한 필터링이 가능함
ex)같은 유튜브 컨텐츠이더라도  어떤 컨텐츠인지에 따라 필터링이 가능해짐

라우팅 기능이나 다른 기능들이 있음

##VMnet##

Hyper visor :
workstation 은 physical resource에 접근하여 Vresource(가상의 리소스) 를 생성
이러한 역할을 하는 어플리케이션을 Hyper visor라 한다.
워크스테이션은 Host 기반의 Hyper visor이다.
*추상화 : 실제 가지고있는 자원을가지고 가상의 자원을 만듬

Host OS : PC에 설치되어있는 실제 OS
Guest OS : vm에 설치되는 OS

*스위치와 브리지의 차이 : vlan의 유무

Bridged Network : HOST PC와 Guest pc를 브릿지로 연결한 것처럼 네트워크를 구성함
같은 IP대역을 사용함 , 인터넷 연결 가능
같은 ip대역에있는 다른 pc에서 GUEST pc로 접근이가능함

NAT : HOST PC와 GUEST pc가 가상의 스위치에 연결되어 또 다른 네트워크 대역을 형성함
외부로 나가는 경우 host PC의 NIC가 가진 IP대역으로 변경되어 나감
인터넷 연결 가능

Host-only Network : NAT에서 nat기능이 빠져있음
인터넷 연결 불가능  Isolated Network(고립된 네트워크)라 불리움

-------------------------------------------------------------------------
ASA 설치 후
프로세서를 듀얼코어로 변경


##ASA장비에서의 인터페이스##
-네트워크 인터페이스 : 트래픽을 transit한다, 
일반적으로 우리가 알고있는 인터페이스
다른쪽으로 트래픽이 넘어갈수 있다.
ex) Fa0/0, g0/0, e0/0

-관리 인터페이스 : 트래픽을 transit하지 않는다
ex) management0/0
종단 인터페이스
해당장비를 관리하기 위한 용도로만 사용하며 주로 telnet ssh gui 연결등을
위한 용도로 사용한다.
다른 인터페이스로 트래픽이 넘어가지 못한다.

인터페이스들의 주로 사용하는 용도
0/0 : 인터넷 연결 (outside)
0/1 : 네트워크 내부 PC들과 연결 (inside)
0/2 : 서버와 연결 (DMZ)

##실습용 설정## 
-Zone Based Firewall

0/0 outside > Bridged 
nameif outside
ip add 10.5.1.212 255.0.0.0
no sh

-default route 설정
route outside 0 0 10.0.0.2

------------------------------------
0/1 inside> VMnet1
nameif inside
security-level 100
 ip add 192.168.1.2 255.255.255.0
 no sh
--------------------------------------

0/2 DMZ> VMnet2
nameif dmz
 ip add 192.168.2.2 255.255.255.0
 security-level 50
 no sh
--------------------------------------

management0> VMnet10
nameif mgmt
 ip add 192.168.10.2 255.255.255.0
security-level 100
no sh
--------------------------------------

passwd cisco : telnet passwd
enable passwd cisco : enable passwd
>passwd 로 설정해도 secret 으로 설정됨

username user1 passwd user1 privilege 15
telnet timeout 1440 : 1440분 동안 아무 입력이없으면 화면보호기 실행
telnet 0 0 mgmt : mgmt 존에서 접속하는 모든 ip의 텔넷 접속을 허용

> 설정완료후 telnet 접속시 192.168.10.2 로 접속만 가능

##VM 설치##
VM : centos 리눅스 설치
-disk 20GB 
-NIC : vmnet2 ( 192.168.2.100/24 dg 192.168.2.2 dns 8.8.8.8 )
minimal install (CLI 만있음)
CPU : 1 core RAM : 2GB

설치후 ping 192.168.2.2 

root : test123
user1 : user1

##nat 설정 ###
conf t 
object network PAT
subnet 192.168.2.0 255.255.255.0
nat (dmz,outside) dynamic interface > dmz 구간에 있는 사설주소 192.168.2.0 을 outside로 내보낼때
주소를 바꾸어서 내보내겠다 (outside int 의 주소로 )
sh run policy-map

policy-map global_policy
 class inspection_default
  inspect
  부분을 드래그 후 입력창에 오른쪽 마우스 클릭

  inspect icmp를 입력


-방화벽은 아래의 트래픽에 대해서 처리가 가능하다
 1.로컬에서 origin 된 트래픽
 2.로컬에서 terminated 되는 트래픽
 3. 해당장비를 transit 하는 트래픽

-방화벽은 security-level을 이용하여 기본 보안 설정이 가능하다
 security-level 은 0~100 사이에서 선택이 가능하며 숫자가 높을수록 보안이 강화된 곳이다.
높은레벨쪽에서 낮은레벨쪽으로는 접속이 가능하지만
낮은레벨쪽에서 높은레벨쪽으로는 접속이 불가능하다.(BUT ACL을 이용하면 접속이 가능하도록 할수있음)
ex)access-list 111 permit tcp any host 192.168.2.100 eq 80

같은 레벨로 설정하게되면 통신이 불가능하다.

sh nameif : 방화벽의 security level을 확인 가능함

보통 outside Zone을 untrust Zone
insidezone 을 trust Zone이라 함

dmz : 일반적으로 server를 두는 존

vyos : 데미안을 베이스로 만들어진 오픈소스 소프트웨어 방화벽

#HSRP 
dual-homed : 하나의 서비스 provider에게서 두개의 회선을 받아서 사용하는것

multi-homed : 두개이상의 service provider에게서 회선을 받아 사용하는것
한개는 active상태로 두고 하나는 standby 상태로 두고 사용
이러한 환경을 구성하기위해서는 HSRP나 VRRP가 꼭 필요함

sh disk0 = sh flash

###ASA에 ASDM 이미지 파일 올리기 ###

ASDM images : GUI 동작을 위한 파일

1.tftp를 실행하고 ASDM파일의 경로를 지정한뒤
server interface를 192.168.1.1로 변경

2. ASA에서 copy tftp flash로 ASDM파일 가져오기

3. sh flash로 파일 업로드 확인

*일반적으로 서비스를 제공하는 디바이스를 "server"라고 부른다.
서비스 제공을 위해서는 서버의 보이지않는 가상의 구멍이있어야한다.
우리는 보이지않는 이 구멍을 "포트"라 한다.

*TCP는 연결지향형(패킷이 중간에 유실되지 않도록 연결을 유지하도록한다. > seq num이용), 신뢰성 있다.

*IP의 대표적인 특징 : "Best Effort" ( 신뢰성을 제공하지 않음 )


###windows7 VM 설치 ###
ip addr 192.168.1.100
dg 192.168.1.2
dns 8.8.8.8
> 설정후 ping 192.168.1.2 로 확인

HOST PC에서 windows VM으로 드래그로 putty 파일 옮기고 설치하기
두개를 열어서 
하나는 ssh로  리눅스 웹서버에 연결(ssh kex 에서 14를 맨위로 1을 다음으로 설정)
나머지는 텔넷으로 방화벽 연결
(ASA에서 telnet 192.168.1.100 255.255.255.255 inside 설정 추가)

http server enable
http 192.168.1.0 255.255.255.0 inside
ASA 에서 http server enable > Https(443port) 를 허용함 
*방화벽에서는 http는 https 를 뜻한다 ( http는 보안상 잘 사용하지 않는다. )

http redirect inside www
443으로 접속할때 inside로 들어가는 사용자들이 
http로 접속해도 https로 접속하도록 해줌

VM 에서 웹브라우저를 열고 192.168.1.2로 접속
> 계속탐색하기

VM에 jdk-6 옮겨서 설치

install asdm launch and run asdm

cisco asdm launcher 에서 
192.168.1.2 user1 user1 으로 접속하기
(continue without save)

[실습]
asdm-721.bin 파일을 이용하여 asdm 연결을 시작하라

1. 윈도우10 에서 tftp 를 이용하여 asdm-721.bin 파일을 ASA 에 업로드
   ASA# copy tftp flash 또는 copy tftp disk0
    처음에는 tftp 서버의 주소를 물어봅니다->tftp 서버는 윈도우10에
    설치되어 있으므로 192.168.1.1 을 작성합니다
    업로드할 파일을 물어보면 asdm-721.bin
    방화벽내부에 저장할 파일이름은 asdm-721.bin 과 동일하게!!!


2. 기존 설정되어 있던 asdm image disk0:/asdm-647.bin 을 지우고
   이를 asdm image disk0:/asdm-721.bin 으로 변경하라.

3. 윈도우 7에서 http://192.168.1.2 로 접속하여 asdm 을 설치한 뒤
   설치가 마무리되면 바탕화면에 있는 asdm luncher 를 이용하여 접속한다.

   정상적으로 연결이 되면 화면과 같이 대시보드에 모든 내용이 표기 됩니다

### ASA 설정변경 ###

[실습] NAT 구성하기
1. 192.168.1.0/24 사용자들은 일반 PC 사용자이므로 특정 공인 주소와의 매핑이 필요한 1:1 NAT를 제공할 필요는 없다. 
해당 inside 사용자들은 211.183.3.101 번 주소 하나만을 이용하여 모두가 인터넷을 사용할 수 있어야 한다.
dynamic PAT 구성하기

outside에 있는 int g0/0을 211.183.3.3으로 변경
dg 211.183.3.2로 변경

사설주소 지정하기
host : 사설주소 하나만을 지정
range : 특정 주소대역 지정
network : 192.168.1.0/24
FQDN : 도메인이름으로 범위를 지정하는 경우

sh xlate > 특정아이피가 어떤 아이피로 변경되었을때 그것을 확인가능함

##시나리오 설정##
dmz 구간에는 192.168.2.100 이라는 웹서버가 있다 현재 사설주소가 할당되어있어 인터넷에있는
클라이언트들이 접속할수 없는 상태이다.
이를 위해 공인 주소 1개와 ㅇ정적으로 매핑시켜 인터넷 사용자들이 웹서비스를 받을수 있도록 하고 싶다.

211.183.3.102를  192.168.2.100과 1:1로 정적 매핑하라

> nat Rule에서  add "Network object" NAT Rule 추가
type : host
ip addr 192.168.2.100
------NAT---------
type : static
translated addr 211.183.3.102
Use one-to-one  address translation 체크

*[라우팅]
라우터가 알지 못하는 네트워크를 알수 있도록 해주는 기능
패킷이 유입되었을때 해당 네트워크를 패킷이 포워딩할수있는기능
기본적으로 라우터는 자신에게 직접 연결된 네트워크로만 통신이 가능하다.

                      .1                    .2
--10.10.10.0/24 --- R1 --- 12.12.12.0/24 --- R2 --- 20.20.20.0/24--

1.static routing : static 라우팅은 단방향이므로 반대쪽에서도 구성해야한다
static 은 최적경로를 유지하기 위한 별도의 메세지가 없다.
관리자가 지정한 경로로 바로 전달된다. 단 복구능력은 없다.
ex) [R1] ip route 20.20.20.0 255.255.255.0 12.12.12.2

2.dynamic routing (using routing protocol)
라우팅 프로토콜을 이용하여 네트워크의 최신정보를 저장한다.
네이버, 라우팅 테이블 등을 유지하기 위한 별도의 메세지가 필요하므로
불필요한 메세지의 전송/수신이 있어 부하가 걸린다.

ex) [R1]
  Router ospf 1
    router-id 1.1.1.1
      network 10.10.10.0 0.0.0.255 area0
      network 12.12.12.0 0.0.0.255 area0


<longest Macth Rules>
라우터는 가장 많이 일치하는 경로로 패킷을 보낸다.
ex) 
0.0.0.0/0 via 2.2.2.2
192.168.1.0/24 via 3.3.3.3
192.168.1.128/25 directly connected fa 0/1

-ping  192.168.1.254 > fa 0/1로 간다.


[stateful packet inspection ***]
패킷이 방화벽을 transit 할때 ( 지나갈때 ) 해당 패킷의 정보(ip,port,SEQ,ACK,Method{get,POST...})를 
자신의 statful table에 저장한다.
리턴되는 트래픽을 확인하여 기존에 방화벽을 지나간 패킷이라면 이를 안전한 패킷으로 인정하여 기존의 ACL과 상관없이
permit되도록 하는 기술


ASA에서 service policy rules에서 Rule action에서 inspect(stateful table에 기록)여부를
확인할수 있음

stateful packet inspection은 ftp 접속과 같이 포트의 번호가 변경되는 경우,
이를 인지하여 내부로 리턴시킬수 있다.

*FTP
active : 가장 일반적인 모드  20번(데이터 전송) 21번 두개의 포트를 사용하여 데이터를 전송할수 있다.
passive : active모드 의 보안 취약점을 보완하기 위하여 사용하고 1024이후의 임의의 포트번호를 사용하여
데이터를 전송한다. stateful packet inspecftion 에서 인식이 가능함

## 실습 ##
211.183.3.102에 http를 제외한 모든 접속을 차단하라

access Rules에서 outside룰 을 수정하기
> 
source : outside

destination : 211.183.3.102

service : tcp/http
enable Rule 체크
source service : tcp/http

*L2,L3 포트/overlaynetwork/GRE 터널링 찾아보기

### ACL ###
ACL : 번호나 숫자를 이용하여 정책을 만들고,
만들어진 정책을 이용하여 트래픽을 필터링/분류 하는데 사용하는 기술

-방화벽에서의 ACL 필터링 구분
1.deny/permit > 일반적인 허용/차단을 말함
2.statful packet inspection 
> security-level과 관계없이 방화벽을 통과(transit)하는 패킷을 허용가능
( 일반적인 방화벽에서는 적용되지않는다)

-분류를 위한  ACL 
ex) ip nat pool 구성시 사용하는 ACL : 특정대역의 ip를 별도로 분리하기위해서 사용함

*wireshark :  현재 연결된 어댑터로 왔다갔다하는 패킷을 분석할수있는 오픈소스 도구

-ACL은 패킷의 어느 부분까지 보느냐에 따라 standard/extended 방식으로 구분한다.
standard : 패킷의 출발지 IP주소만을 확인한다.
extended : 패킷의 L3,L4 부분을 모두 확인하고 처리할수 있다.
            ex) src/dst ip, src/dst port 

라우터는 인터페이스에 ACL을 적용할때 standard와 extended 모두 적용이가능하지만
방화벽은 보안성 강화를 위하여 standard는 사용할수 없다.

일반적인 ACL 사용법 (라우터에서의 사용법)
-다음의 법칙을 지켜야한다.
1.top-down 방식 (위에서부터 아래로 내려가면서적용)
ex) 
access-list 1 permit host 1.1.1.1
access-list 1 deny any

2.ACL의 가장아래에는 "deny any or deny ip any any" 가 생략되어있음

3.작성된 ACL은 int/line/routing portocol/nat 등등에 적용해주어야 활성화된다.

*MPF

라우터의 ACL 은 특정 호스트 주소를 골라내기 위해 "wildcard bit"를 사용한다.
-wildcard 
0 : 동일해야한다 (look at this bit)
1 : 상관없다 (don't care bit)

방화벽에서는 서브넷 마스크를 사용함

기본적인 웹서비스는 3tier구조를 갖는다.
client > web 서버 > WEB Application server (WAS) > DBMS(stg)

*/var/log/httpd/access_log : 웹서버 접속 로그파일

*DB를 사용할수있는 방법 
1. 서버에 OS를 설치하고, 그위에 RDBMS(mariadb,mysql,oracle) 설치
2. 클라우드 상에서 물리자원이나 OS는 제외하고 RDBMS만을 설치 배포한다.



[webserver/Load Blancer 실습]
현재 VMnet2 에 서버가 배치되어있으므로 아래와 같이 간단한 구조에서 실습한다.

WEBSRV1 (.100) WEBSRV2(.200) STG(.254)
---------------LB(.99)------------------ 
         (공인주소와 1:1로 NAT) 

------------192.168.2.0/24--------------


         CPU  RAM    NIC1     NIC2  
LB         1    1     nat      vmnet2
                      DHCP     192.168.2.99 (dg 192.168.2.2 dns 8.8.8.8)
WEBSRV2    1   1     DHCP     192.168.2.200 (dgx dns x)          
STG        1   1     DHCP     192.168.2.254 (dgx dns x)       



-STG 192.168.2.254
mkdir /test
chmod 777 /test
vi /test/index.html
---------------------
WEB test
STG 
---------------------

vi /etc/export
-------------------------------
/test   192.168.2.100(rw,sync)
/test   192.168.2.200(rw,sync)
-----------------------------------
systemctl restart nfs-server 

-webserver1,2 
(192.168.2.100, 200) 
mount -t nfs 192.168.2.254:/test /var/www/html 

systemctl restart httpd 

-host PC 웹브라우저에서  192.168.2.100, 200에 접속확인

-LB 192.168.2.99
*만약 두개의 네트워크 어댑터가 모두 인터넷과 연결되어있다면 라운드로빈 방식으로 
인터넷과 연결하게 되므로 속도저하가 발생할수 있다.
그러므로 yum install시에는 가능하면 하나의 인터페이스만 사용할것

yum install -y haproxy (오픈소스 기반의 LB)
ifdown ens32 (nat로 설정된 interface)

- haproxy(오픈소스 기반의 LB) 설치는 yum -y install haproxy 를 이용
- ens32(NAT), ens33(VMnet2) 둘다 up 되어 있을 경우 트래픽이 양쪽으로 나뉘게 되어 속도가 떨어질 수 있으니 콘솔에서 ifdown ens33(vmnet2) 하여 nat 인터페이스를 통해 설치를 진행합니다.
- 설치가 완료되면 ifdown ens32 && ifup ens33  을 해 두세요!

------------------------------ HAProxy 구성내용 (/etc/haproxy/haproxy.cfg 파일 내용)--------------------------
global
log 127.0.0.1 local2

chroot /var/lib/haproxy
pidfile /var/run/haproxy.pid
maxconn 4000
user haproxy
group haproxy
daemon

stats socket /var/lib/haproxy/stats

defaults
mode http
log global
option httplog
option dontlognull
option http-server-close
option forwardfor except 127.0.0.0/8
option redispatch
retries 3
timeout http-request 10s
timeout queue 1m
timeout connect 10s
timeout client 1m
timeout server 1m
timeout http-keep-alive 10s
timeout check 10s
maxconn 3000

frontend http-in
bind 192.168.2.99:80
default_backend app
option forwardfor

backend app
balance roundrobin
server app1 192.168.2.100:80 check
server app2 192.168.2.200:80 check


-------------------> systemctl restart haproxy ---------------> 
 -  테스트 : 윈도우 10에서 http://192.168.2.99 로 접속해본다.

 - 이때, 두 대의 웹서버에서는 tail -f /var/log/httpd/access_log 파일을 
  실시간으로 확인하여 어느쪽 서버로 접속되었는가를 확인해 본다.

 - 이제 준비는 끝났다. 외부에 노출시키자!!!
    
 - LB 주소인 192.168.2.99 를 공인 주소인 211.183.3.99 와 1:1 정적 NAT
   
 - ACL 을 이용하여 외부에서 유입되는 트래픽 중 192.168.2.99 로의 웹 접속을 허용한다.

 - 테스트 : 윈도우 10에서 http://211.183.3.99 로 접속하고 웹서버에서 tail 로 확인한다.



-STG에 docker 설치

yum -y install yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 
yum -y install docker-ce

docker -v : 도커 버전 확인

systemctl restart docker
docker container run -it --name test --hostname test1 ubuntu /bin/bash

<docker contianer run 옵션>
-it : 포그라운드 실행
-d : 백그라운드 실행
-e : 환경변수 지정
-v : 볼륨지정
-p : 포트지정

-도커
도커에서는 커널은 원래 HOST의 것을 사용함
컨테이너를 만들어 우분투를 설치
우분투 OS만을 사용해서 어플리케이션처럼 사용함
그러므로 리눅스에서는 리눅스의 커널을 이해할수 있는 어플리케이션만을 사용가능
*개발방법론 > 폭포수모델 > 애자일 방법론 

uname -A : 컨테이너로 올린 우분투에서 uname -a 를 하면 centos 커널의 정보가 나옴

ctrl +p ctrl +q 
docker container ls
docker container ls --all

<docker로 서로다른 워드프레스 웹서버 설치> 
docker container run -d --name wordpressdb  -v mariadb-data:/var/lib/mysql -e "MYSQL_ROOT_PASSWORD=kamisama123" -e MYSQL_USER=wordpress -e "MYSQL_PASSWORD=kamisama123" -e "MYSQL_DATABASE=wordpress" mariadb
docker container run -d --name wordpress -p 80:80 -v wordpress-data:/var/www/html --link wordpressdb:mysql -e WORDPRESS_DB_USER=wordpress -e "WORDPRESS_DB_PASSWORD=kamisama123" -e WORDPRESS_DB_NAME=wordpress wordpress


docker container run -d --name wordpressdb01  -v mariadb-data:/var/lib/mysql -e "MYSQL_ROOT_PASSWORD=kamisama123" -e MYSQL_USER=wordpress -e "MYSQL_PASSWORD=kamisama123" -e "MYSQL_DATABASE=wordpress01" mariadb
docker container run -d --name wordpress01 -p 8001:80 -v wordpress-data:/var/www/html --link wordpressdb:mysql -e WORDPRESS_DB_USER=wordpress -e "WORDPRESS_DB_PASSWORD=kamisama123" -e WORDPRESS_DB_NAME=wordpress01 wordpress


*이더채널 (리눅스에서는 본딩) : 2개이상의 인터페이스를 묶어서 하나로 사용가능한 기술
원래는 두개이상의 인터페이스로 연결하면 STP로 인해 하나만 사용가능하지만 이더채널을 구성하면
하나의 인터페이스의 대역폭을 늘리는 것이 가능해진다.


*fabric 장비 : STP가 발생할수있는 구간을 묶어서 하나의 장비로 만들어 사용
스위치에 장착시켜서 스위치간의 경로를 여러개로 구성시켜줌


*네트워크 안정화를 위한 대표적인 기술
HSRP(Hot standby Router protocol) : by cisco
VRRP (표준 이중화 기술) 
> 두개의 기술은 같은 기능을 가진다.

두개이상의 ISP가 있는경우 두개 이상의 Router중 하나를 선택하는것이아니라
하나의 가상 라우터를 구성한뒤 Router와 연결시킨뒤 우선순위를 부여하여 주로 사용할 라우터를 선택함
(이중화를 구성하는것)

HSRP 의 장점
-24시간 온라인을 유지할수 있다.
-두대이상의 장비가 서로 다른 장비라고 하더라도 구성이 가능하다.

HSRP 의 단점
-한쪽 라우터를 통해 외부와 통신하고 있는 트래픽의 세션정보, mac/arp정보등을 반대쪽 라우터에서는 알지못함.
 만약 fail over(역할 교대)가 발생하면 반대쪽라우터에서는 세션정보를 새로 만들어야한다.
-active/standby를 각각 구성해야한다.


방화벽 (fail over/ switchover )
-active 장비에 문제가 발생하거나 외부와의 연결에 문제가 있을 경우
active권한을 반대쪽 standby에게 넘겨준다.
이때 active의 IP/MAC주소도 변경된다.

-구성값도 active에서 standby로 넘겨준다 ( 구성은 한쪽에서만 하면된다.)
-구성값을 복사하여 반대쪽으로 넘겨주기때문에 모든 하드웨어 제원이 동일해야한다.
(RAM사이즈를 제외한 모든 정보가 동일해야한다.)
-만약 다르다면 HA(high ability)가 구성되지않는다. (일반적으로 회사에서는 동일한제품을 두개이상 구매하여 사용)

-Primary장비에서 설정을 하면 Secondary장비에 설정값을 자동으로 넘겨준다.
일반적으로 Primary장비가 active, Secondary장비가 Standby가 된다. 

-구성을 할때 다른 장비가 acitve상태라면 standby로 들어가고
다른 장비가 standby상태라면 active가 된다.

-방화벽에서는 network/failover interface를 사용하다
트래픽을 처리하여 외부로 forwad 하는 인터페이스 : network int

-failover 
1. LAN failover : 인터페이스 동작상태/명령어를 복사해서 전달
2. stateful failover : NAT, tcp연결정보 , ARP, MAC, IP phone 연결정보등을 
복사하여 반대쪽으로 넘겨준다. 기본적으로 http 연결정보는 복사하지않는다.
두인터페이스는 하나의 인터페이스 만을 이용하여 구성할수 있다 ( 두개를 한꺼번에 묶어서 사용가능)


-failover 구성을 위한 조건
1.같은 하드웨어모델/인터페이스의 타입과 넘버
2.서로 같은 모듈을 배치해야한다.
3.같은 메모리양 (권장)
4.라이센스 동일


g0/2를 failover interface로 설정
asav1 - g0/2 : failover lan unit Primary
asav2 - g0/2 : failover lan unit Secondary

<공통>
failover lan interface FO g0/2
failover int ip FO 192.168.2.2 255.255.255.0 standby 192.168.2.3
failover link FO
failover replication http
failover

>asav2에서 이름이 바뀌는지 확인


<int ip 설정>
ex) ip address 192.168.1.2 255.255.255.0 standy 192.168.1.3

ASA/act# sh int ip bri
Interface                  IP-Address      OK? Method Status                Protocol
GigabitEthernet0/0         211.183.3.12    YES manual up                    up
GigabitEthernet0/1         192.168.1.2     YES manual up                    up
GigabitEthernet0/2         192.168.2.2     YES unset  up                    up
Management0/0              192.168.10.12   YES manual up                    up

ASA/stby# sh int ip bri
Interface                  IP-Address      OK? Method Status                Protocol
GigabitEthernet0/0         211.183.3.13    YES manual up                    up
GigabitEthernet0/1         192.168.1.3     YES manual up                    up
GigabitEthernet0/2         192.168.2.3     YES unset  up                    up
Management0/0              192.168.10.13   YES manual up                    up


<asdm 설치>
prompt hostname state
asdm image disk0:/asdm-721.bin
username user1 password user1 priv 15
http server enable
http 0 0 inside


<ASDM실행후 NAT/ACL 설정>
192.168.2.200(웹서버2)의 ip/dg 변경
ip : 192.168.1.200
dg : 192.168.1.2

-NAT 설정
192.168.1.200 ---1대1 매핑--> 211.183.3.100
192.168.1.0/24 네트워크 ---PAT---> 211.183.3.101

-ACL 설정
Any ----http 만 허용 ---> 211.183.3.100


<AD>
0 : connected
1 : static 
255 : unreachable

<엔터프라이즈 네트워크>
엔터프라이즈 네트워크는  다수의 사용자가 동시에 인터넷을 사용하는 경우가 많다.
이경우 제약된 외부 연결 대역폭을 동시에 사용하게 되므로 속도저하 발생
이를 해결하기위해 회사에서는 프록시를 사용 속도를 향상시키고 보안성을 강화 가능


프록시서버 : 대리인 역할을 하는 서버
대신 인터넷 망에 접속하는 역할
프록시서버에는 캐시가 저장되어 

<웹서버에 프록시 설치>

-웹서버

yum install -y squid

vi /etc/squid/squid.conf
------------------------------------
acl centos7 src 192.168.1.0/255.255.255.0
http_access allow centos7
cache_dir ufs /var/spool/squid 1000 16 256 #>주석처리만 지워도 됨
visible_hostname centos7
----------------------------------------

systemctl restart squid
systemctl stop firewalld.service


-윈도우 7

인터넷 옵션에서 LAN설정 프록시서버에서 체크박스 모두 체크
ip add : 192.168.1.200 port : 3128

인터넷 접속확인
-----------------------------------------------------

MQC : QoS 를 위한 시스코의 chmod
class-map policy-map service-policy 를 이용하여 특정 트래픽에 대한
정책을 부여한다.

MQC를 방화벽에서 발전시켜 만든것이 MPF(Modular Policy Firewall)

*QOS(Quality of Service) : 주로 서비스의 품질향상을 위해 필요한 기술
제한된 자원을 효율적으로 사용하기위한 목적

input queue  >  process
               1.access-list (permit/deny) --permit--> output queue
               2.NAT
               3.routing

-일반적인 이더넷은 queuing(큐잉) 방식으로 FIFO (first in first out)
<큐잉의 방식>
-PQ(Priority queuing) - 큐를 4개 만든다 (high, medium, normal, low)
high 큐에 들어오는 데이터부터 처리함 (다른 큐에서 데이터를처리할때도 
high큐에 데이터가 들어오면 모두 멈추고 high큐부터 처리)

-WFQ(Weighted Fair queuing) : 큐를 16개를 만든다, 가중치를 주어서 동시에 데이터를 처리함

-CBWFQ(PQ+WFQ) 

-패킷이 라우터, 서버, 방화벽등의 장비로 유입되면 input queue에 담긴다.

-한번에 들어오는 데이터의 양이 queue사이즈를 넘는다면 queue를 처리하지않고
비워버린다.

-QOS 정책 설정에 대한 일관성을 유지하기 위하여 MQC를 사용한다.
   
   class-map TEST :트래픽을 분류한다.
   ex) match access-group 10
   
   policy-map TESTP : 분류된 트래픽에 대하여 정책을 부여
   class TEST  
      bandwidth percent 10
   int fa0/0
      service-policy TESTP in


sh run class-map
class-map inspection_default  > 트래픽 분류
 match default-inspection-traffic > inspectin 을 위해 지정된 모든 트래픽들

sh run policy-map
  inspect esmtp
  inspect sqlnet
  inspect skinny
  inspect sunrpc
  inspect xdmcp
  inspect sip
  inspect netbios
  inspect tftp
  inspect ip-options
  inspect icmp
  inspect http
!

sh run service-policy
service-policy global_policy global
*global > 모든인터페이스를 의미한다.

L3~L4 까지의 트래픽에대한 정책부여는 세단계를 거치고
L5~L7 까지의 트래픽에대한 정책부여는 두단계를 거쳐야한다.

만약 데이터에 www.jobkorea.com 이있는 데이터를 골라내고 싶다면
먼저 L3~L4 에서 http트래픽을 분류해내야한다.

분류된 모든 트래픽은 웹데이터라는 것을 확신할수있다.
이중에서 L5~L7에 있는 내용을 확인하여 www.jobkorea.com
을 골라내야한다.

regex NO-JOB ".*\.jobkorea\.co\.kr"
regex NO-PIC ".*\.([Jj][Pp][Gg]|[Jj][Pp][Ee][Gg]|[gG][iI][Ff]|[Bb][Mm][Pp]|[Pp][Nn][Gg])"
regex NO-SARAM ".*\.saramin\.co\.kr"
!
class-map type regex match-any BLOCK-SITES-PIC
 match regex NO-JOB
 match regex NO-SARAM
!
class-map type inspect http match-any CLASS-BLOCK-PIC
 match request header host regex class BLOCK-SITES-PIC
 match request uri regex NO-PIC
!
policy-map type inspect http POLICY-HTTP
 parameters
 class CLASS-BLOCK-PIC
  drop-connection
! 
class-map CLASS-HTTP
 match port tcp eq www
! 
policy-map POLICY-INSIDE
 class CLASS-HTTP
  inspect http POLICY-HTTP
!
service-policy POLICY-INSIDE interface inside


  ad.google.com 
  www.google.com
  www.google.co.kr
  www.google.com.au...   와 같이 호스트명에 google 이 들어간다면 모두 drop

  그리고...
  이미지... jpg, jpgeg, bmp, png... 와 같은 파일은 drop 

  www.keduit.com  에서 이미지 drop 되는지 확인, www.google.com 연결 안됨. www.daum.net 연결가능



------------------3/29------------------------------

공인IP : ISP에 비용을 지불하고 인터넷 서비스를 제공받는다
        공인IP 의 주소는 Unique해야한다.

사설 IP : 비용을 지불하지않으므로 인터넷을 사용할수 없는 주소는
          10.x.x.x, 172.16.x.x ~172.31.x.x, 192.168.x.x 
          만약 사설구간에 공인주소를 임의로 할당할 경우
          인터넷을 사용할수 없다.


GRE 터널방식을 사용하여 사설IP구간에서 사설 IP구간끼리 통신이가능
 공인 IP | GRE | 사설 IP | icmp | data


<실습>
GNS에서 다음과 같이 구성함
          fa0/0             fa0/0
        HQ ---------ISP-----------BR1
        |  fa0/1           fa 0/1 |
      net1                     net2
 192.168.1.0/24              192.168.2.0/24

R1 >fa 0/0 : 12.12.12.2/24 fa 0/1 192.168.1.2  
R1 >fa 0/0 : 23.23.23.2/24 fa 0/1 192.168.2.2

각 라우터에서 
access-list 1 permit any
ip nat inside source list 1 int fa0/0 overload
int fa 0/0
ip nat outside
int fa 0/1
ip nat inside
sh ip nat translations
int tunnel 0
tunnel source fa 0/0
tunnel destination 23.23.23.2
tunnel mode gre ip
ip address 172.16.12.1 255.255.255.0
ip route 192.168.2.0 255.255.255.0 172.16.12.2

<GRE의 장/단점>
-GRE 터널을 이용하면 인터넷구간을 사설주소를 이용해 통신가능하므로 매우편리
단 해당데이터는 클리어 텍스트로 전송되므로 중간에 악의적 목적을 갖는 사람이 이를 캡쳐하여 악용가능
그러므로 우리는 암호화, 인증,hashing(무결성검사)이 필요함

-이를 모두 충족하는 기술이 바로 VPN이다

-최근 퍼블릭구간에 회사의 DB를 구축하고 
회사내부 또는 별도의 DC에 WEBSER를 구축한다음
이 둘을 VPN을 이용하여 연결하여 이용하는 경우가 많아지고있음

*on-premises : 회사내부에 자체적인 Data Center를 구축하는것

-IPsec Framework 
1.IPsec-protocol 
AH ( authentication-header) > 데이터에 대한 암호화 지원x
ESP (encapsulation Security Payload)
ESP+AH

2.Confidentiality(암호화)
DES
3DES
AES 
SEAL 
> 아래로 갈수록 암호화는 강해지고 처리속도는 낮아짐
AES를 주로 사용, 항상 공개되어있는 암호화 알고리즘을 사용함

3.integrity(무결성검사) 
MD5
SHA 
> 원래 데이터가 수신지에서 얼마나 위조나 변조가 되었는지를 확인하는 기술

4.Authentication(인증)
Pre-shared Key
RSA(key-pair)

5.secure Key Exchange(diffie-hellman)
DH1
DH2
DH5
DH7

<AH/ESP>
AH : 데이터 송신자의 인증을 허용하는 인증헤더
AH는 IP헤더와 전송헤더 사이에 삽입
발신자가 보낸컨텐츠를 수신자가 그대로 수신할수있음.(무결성)
데이터의 근원지 식별가능 (인증)
공격자에 의한 재전송 패킷의 감지 및 폐기
호스트와 호스트간의 메세지 무결성 제공( 트랜스포트 모드)
터널모드 : 보안 게이트웨이와 게이트웨이 사이 및 호스트와 보안게이트웨이에 사용

ESP : 송신자의 인증및 데이터 암호화를 함께지원
ESP는 IP헤더와 전송헤더 사이에 삽입되고 ESP이후의 데이터를 암호화 시킴
정당한 사용자만이 패킷의 내용을 파악가능 (기밀성)
데이터의 근원지를 식별가능 (인증)
IP헤더 및 패킷내용의 변조여부 확인가능 (무결성)
공격자에의한 재전송패킷의 감지 및 폐기
기밀성 서비스를 위해 암호화에 대칭키 알고리즘을 사용
인증 및 무결성 서비스를 위해 메세지 인증 코드 사용


<VPN 구축단계>
1.IKE Phase1(internet key exchange)
ISAKMP (Internet Security Association Key Management Protocol)
양쪽에서 키를 주고받아 VPN통신할수 있는 길을 만드는 작업

2.IKE Phase2
IP sec (IP security)
만들어진 길위로 지나가는 실제 데이터에대한 보안작업이 이루어지는 단계
> 데이터 암호화,인증에 기반한 해싱

<실제 구축>
-HQ
conf t
crypto isakmp policy 10
authentication pre-share
encryption 3des
group 2
hash md5
exit
crypto isakmp key test123 address 23.23.23.2

crypto ipsec transform-set TEST esp-aes 128 esp-md5-hmac
access-list 111 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255

-BR1
conf t
crypto isakmp policy 10
authentication pre-share
encryption 3des
group 2
hash md5
exit
crypto isakmp key test123 address 12.12.12.2

crypto ipsec transform-set TEST esp-aes 128 esp-md5-hmac
access-list 111 permit ip 192.168.2.0 0.0.0.255 192.168.1.0 0.0.0.255

-HQ
crypto map CTEST 10 ipsec-isakmp
match address 111
set peer 23.23.23.2
set transform-set TEST
int fa0/0
crypto map CTEST

-BR1
crypto map CTEST 10 ipsec-isakmp
match address 111
set peer 23.23.23.2
set transform-set TEST
int fa0/0
crypto map CTEST

nat 끄기


주의해야할 점
- 순서대로 해야한다.
- key(test123) .. 는 복사 붙여넣기 하지 말것!
- # show crypto isakmp sa  를 통해 세션이 만들어져 있는지 여부를 확인

- 실제 업무를 하는 곳에서는 아래와 같은 NAT 가 구성되어 있을 것이다.

 access-list 100 deny ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
 access-list 100 permit ip 192.168.1.0 0.0.0.255 any
 ip nat inside source 100 int fa0/0 overload
 

<실습> 
ASDM을 이용하여 자신의 사설네트워크에서
옆사람의 사설네트워크 주소로 통신이 가능하도록
Site-to-Site VPN을 구성하라.

*peer ip > 상대방 공인주소
*localnetwork > 자신의 사설주소
*remote network > 상대방 사설주소
service policy icmp 허용


<실습2 2개의 NAT 경로를 만들기(1개는 백업용도)> 

g0/0 outside > 10.5.1.203
g0/1 backup > 211.183.3.111
g0/2 inside > 192.168.1.2

object network outside
subnet 192.168.1.0 255.255.255.0
nat (inside,outside) dy int


object network backup
subnet 192.168.1.0 255.255.255.0
nat (inside,backup) dy int

route outside 0 0 10.0.0.1
route backup 0 0 211.183.3.2 100

sh route 로 디폴트루트가 outside인지확인
8.8.8.8 핑

int g0/0 셧다운 후 8.8.8.8 핑
sh route 로 디폴트루트가 backup인지확인

<SLA 구성>
sla monitor 1
type echo protocol ipicmpecho 8.8.8.8 int outside
exit
sla monitor 1
frequency 10
timeout 3000  #>3초
exit
sla monitor schedule 1 start-time now life forever
track 1 rtr 1 reachability

route outside 0 0 10.0.0.1 track1
sh run route
no route outside 0 0 10.0.0.1

wireshark에서 이더넷 인터페이스에가서
ip.addr == 10.5.1.203 && icmp 로 패킷 검색



VPN 
본사와 지사간 연결
회사와 회사 (파트너사)
easy VPN =sslvpn (회사 <> 개인)
인터넷을 거쳐 사설주소간 통신이 가능해진다
또한 해당 데이터를 암호화/무결성검사/인증을 거친후 
통신하므로 안전한 데이터 통신이가능해진다.

site-to-site VPN : 회사와 회사를 1대1로 연결하는 방식
반드시 VPN 장비가 필요함


[실습환경 구성하기]

GNS에서 다음과 같이 구성함

                      vnet8
                       |
      IPTIME ---------INT--------VPNGW
        |                          |
      net1                        net2
 192.168.1.0/24              192.168.2.0/24


<INT>
int fa0/1
ip add 12.12.12.1 255.255.255.0
no sh

int fa1/0
ip add 23.23.23.1 255.255.255.0
no sh

int fa0/0
ip add 211.183.3.3 255.255.255.0
no sh

ip route 0.0.0.0 0.0.0.0 211.183.3.2

access-list 1 per 12.12.12.0 0.0.0.255
access-list 1 per 23.23.23.0 0.0.0.255

ip nat inside so list 1 int fa0/0 overload


int fa0/0
ip nat outside

int range fa0/1 , fa1/0
ip nat inside

<IPTIME>
int fa 0/0
ip add 12.12.12.2 255.255.255.0
no sh
int fa 0/1
ip add 192.168.1.2 255.255.255.0
no sh

ip route 0.0.0.0 0.0.0.0 12.12.12.1
access-list 1 permit  192.168.1.0 0.0.0.255
ip nat inside source list 1 interface fa0/0 overload
ip dhcp excluded-address 192.168.1.1 192.168.1.100
ip dhcp pool IPTIME
network 192.168.1.0 /24
dns-server 168.126.63.1 168.126.63.2
default-router 192.168.1.2
lease  0 2
domain-name iptime.com

<VPN>
int fa0/0
ip add 23.23.23.2 255.255.255.0
no sh
int fa 1/0
ip add 192.168.2.2 255.255.255.0
no sh
ip http server
ip http authentication local
username user1 privilege 15 password user1
username user2 privilege 15 password user2
ip route  0.0.0.0 0.0.0.0 23.23.23.1
ip http secure-server

<window7 vm>
sdm설치후
관리자 권한으로 sdm실행
https박스 체크 x 접속해보기


-esay VPN의 원격접속을 위해 설정해야할 사항
1. VPN gateway 주소
2. group policy > 그룹별로 key,pool(ip/dns/split-tunnel)
3. 계정정보 :

*split-tunnel : 일반적으로 easy/ssl vpn연결을 하게되면
보안을 위해서 인터넷연결은 불가능. 하지만 인터넷연결이
동시에 필요한 경우에는 split-tunnel을 구성하여 해결가능


vpn 메뉴에서 easy VPN Server > enable AAA
start wizard
unnumber 설정 > fa 0/0 (vpn gateway설정)
authentication : pre-shared key
next

-add IKE proposal
Priority : 2
encryption :3DES
authentication : pre-shared
D-H group : group2
hash : MD5
next

-add transformset
name : TEST
ESP 체크박스 v
integrity algorithm : ESP MD5
encryption algorithm : ESP AES 128
next

-group Authorization and Group Policy Lookup

local 체크 v 
next
*RADIUS 는 따로 인증서버가 있는경우 사용함

-User Authentication
Localonly
next

-Group Authorization and User Group Policy
add new group Policy

Group name : sales
pre-shared key : test123

<pool setting>
starting ip : 192.168.2.1
Ending IP  : 192.168.2.100
subnet mask : 255.255.255.0
maximum Connections Allowed : 5
next
next
finish

easy vpn은 vpn장비를 이용하여 
접속하기 어려운 pc에서 주로 사용하는 방법
만약 해당소프트웨어가 없으면 vpn장비가없는것과 동일 > 접속불가능

외부에서 접속시 이러한 소프트웨어대신 웹브라우저만으로
접속하고싶다 > SSLVPN사용


SSLVPN은 아래와 같은 두가지 접속모드 지원
Clientless Webvpn :web브라우저 이용
anyconnect VPN :이지vpn과 비슷하게 anyconnect라는 소프트웨어를 
이용하여 접속하는 방법

[ssl 실습]
시나리오 : 
ssl vpn을 구축하고 외부에서 접속하는 사용자가 인증에 성공하면
192.168.5.0/24의 주소를 할당해준다 또한 split-tunnel 을 구성하여
VPN과 인터넷을 동시에 사용할수 있도록 구성하다.

처음 접속은 웹브라우저를 통해 접속할것이고 해당접속에서 anyconnect를
다운로드하여 설치한뒤, 두번째 접속부터는 이를 이용하여 접속한다.

------------------------------------------------------------
기존 토폴로지에서 R1을 지우고 
클라우드로 변경하여 연결 (vnet3)

<SSl VPN 연결은 위한  방화벽 설정>
network adapter
1 hostonly
2 vmnet3
3 vmnet2
4 hostonly

-int
int fa 1/0
ip add 192.168.3.2 255.255.255.0
no sh

access-list 1 permit 192.168.3.0 0.0.0.255

-ASA
int g0/1 
nameif inside
ip add 192.168.2.2 255.255.255.0
no sh
telnet 0 0 inside
telnet timeout 1440
password cisco
username user1 password user1 priv 15
enable password cisco

show disk0:/ 로 asdm-721.bin 과 annyconnect파일 확인

-win7 에서 텔넷으로 asa 접속

int g 0/0
nameif outside
ip address 192.168.3.3 255.255.255.0
no sh

route outside 0 0 192.168.3.2

object network INSIDE
subnet 192.168.2.0 255.255.255.0
nat (inside,outside) dy interface
exit

webvpn
anyconnect image disk0:/anyconnect-win-3.1.05152-k9.pk
enable outside
anyconnect enable
exit
sysopt connection permit-vpn
http redirect outside www

-다른네트워크에 위치한 vm의 웹브라우저로
192.168.3.3으로 접속해보기

ip local pool VPNpool 192.168.5.101-192.168.5.119 mask 255.255.255.0

object network obj-local
subnet 192.168.2.0 255.255.255.0
exit

object network obj-vpnpool
subnet 192.168.5.0 255.255.255.0
exit

nat (inside,outside) source static obj-local obj-local destination static obj-vpnpool obj-vpnpool
access-list split-tunnel standard permit 192.168.2.0 255.255.255.0

group-policy Anyconnect-Policy internal
group-policy Anyconnect-Policy attributes

vpn-tunnel-protocol ssl-client ssl-clientless
split-tunnel-policy tunnelspecified

split-tunnel-network-list value split-tunnel
dns-server value 192.168.2.222

webvpn
anyconnect keep-installer installed
anyconnect ask none default anyconnect
anyconnect dpd-interval client 20

tunnel-group sales type remote-access
tunnel-group sales general-attributes

default-group-policy Anyconnect-Policy
address-pool VPNpool
exit

tunnel-group sales webvpn-attributes

group-alias group_sales enable
onscreen-keyboard logon

tunnel-group-list enable
exit

username user10 password use10
username user10 attributes
service-type remote-access


-다른네트워크에 위치한 vm의 웹브라우저로
192.168.3.3으로 접속해보기

192.168.2.22에 깨비홈서버를 설치하여
아파치 웹서버를 설치한뒤 웹서버가 정상적으로 연결되는지 확인


*ospf 멀티캐스트 주소> 224.0.0.5(other to DR) 224.0.0.6 (DR to other)
 EIGRP 멀티캐스트 주소 > 224.0.0.10


-----------------------------------------------------
vpc : virtual private cloud

overlay network :주로 클라우드와 가상화 환경에서 사용하는 개념
물리적으로 떨어져있는 동일 네트워크 주소를 오버레이 네트워크를 통해
마치 한곳에 모여있는 네트워크인것 처럼 만들어 줄수 있다.

-overlaynetwork를 구성하기위해 필요한것
GRE터널 
VxLAN ** 
이를 이용하여 물리적으로 떨어져있는 호스트들을 하나의 L2구간에
논리적으로 배치할수 있다.

[리눅스 실습환경 만들기]

hostname                  ens32                         ens33
webwas      211.183.3.101 dg 3.2 dns 8.8.8.8    192.168.1.101 DG/DNS x
webwas      211.183.3.102 dg 3.2 dns 8.8.8.8    192.168.1.102 DG/DNS x

두서버에서 yum -y install mysql

WEBWAS에 yum -y install httpd php php-mysql

<공통>
.bash rc에서 alias vi='vim'

vi /etc/host
----------------------------------
192.168.1.101 webwas
192.168.1.102 dbms
-----------------------------------
> 설정후 양쪽에서 호스트네임으로 ping가능한지 확인
ex) ping webwas, ping dbms

*도메인네임으로 ping을하게되면 먼저 자신의 cache에 도메인정보가 있는지 확인한뒤
hosts파일을 확인하고 거기에도 없다면 DNS서버에서 찾는다.
DNS서버에도 존재하지않으면 연결실패 

*windows에도 hosts파일이 존재함 > c:\Windows\System32\drivers\etc

vi /etc/default/grub
6번라인 맨뒤에 추가 net.ifnames=0 biosdevname=0 "
> 네트워크 인터페이스의 이름을 슬롯이나 인터페이스
이름으로 설정하지않겠다.

cd /etc/sysconfig/network-scripts
mv ifcfg-ens32 ifcfg-eth0

mv ifcfg-ens33 ifcfg-eth1

sed -i 's/ens32/eth0/g' ifcfg-eth0

sed -i 's/ens31/eth1/g' ifcfg-eth1

vi ifcfg-eth1
vi ifcfg-eth0
---------------------------
TYPE=Ethernet
BOOTPROTO=none
NAME=eth0
DEVICE=eth0
ONBOOT=yes
IPADDR=211.183.3.101
PREFIX=24
GATEWAY=211.183.3.2
DNS1=8.8.8.8
만 남기고 삭제
-----------------------------------

grub2-mkconfig -o /boot/grub2/grub.cfg
reboot 후 ifconfig로 인터페이스 확인해보기
> ens32,33 둘다바뀌어있음 ip도 바뀌어있음

위와 같은 방법으로 ifcfg-ens33 파일을
eth1로 변경하기

sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config


*3tie 구조 형성
  WEB서버 ------- WAS--------DBMS
  (httpd) ------>tomcat----->oracle mariadb,mysql
  html,css      PHP,GOlang
(bash와 연동 x)  ASP,jsp,python
              (bash와 연동 가능)

대량의 트래픽이 내부로 유입되는 경우 
이를 적절히 처리할수 있는 능력이 필요하다
대표적으로 scale에 대한 구성이다.

scale up : 수직확장. 한대의 서버에서 물리자원을 늘리는 방법
          ex) 서버를 끄고 코어나 메모리를 늘리는 등의 작업
           무조건 가상화된 환경에서 사용하는것이 좋다.

scale out : 수평확장, 한대의 서버와 동일한 서버를 추가로 늘린다.

클라우드 환경에서는 기업용 서버는 Scale out을 주로 사용하고
개인용은 비용의 부담으로 인해 scale up을 주로사용한다.

CSP(aws,gcp ..) 에서는 간편히 scale out 설정이 가능하다.

<WEBWAS>

vi /var/www/html/index.html 
---------------------------
<!DOCTYPE html>
<html>
<head><title> test</title></head>
<body>
<center>
<h2> this is TEST PAGE </h2>
</center>
</body>

</html>
---------------------------------
 
 
 vi /etc/httpd/conf/httpd.conf
-----------------------------------
DirectoryIndex index.html index.php
----------------------------------------

cp index.html index.php

vi로 두 파일 구분가능하도록 변경

mv index.html main.html

웹브라우저로 192.168.1.101로접속


vi connect.php
-----------------------
<?php
phpinfo();
?>
------------------------

웹브라우저로 192.168.1.101/connect.php로 접속

*php : server 프로그램( 웹서버가 있어야만 동작가능)
html : client 프로그램 (서버가 따로 없더라도 동작가능)



<DBMS>
[MySQL 설치하기]
yum -y install wget 
wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
rpm -ivh mysql57-community-release-el7-11.noarch.rpm
yum -y install mysql-server

 mysql_secure_installation

 new pasword : TEst123!
 Remove anonymous users? yes
 Disallow root login remotely? n
Remove test database and access to it? y


mysql -u root -p
> denied 되면 /var/log/mysqld.log 에서
임시비밀번호 찾아서 접속

-원격으로 접속허용하기
------------------------------------------------
create user 'root'@'%' identified by 'TEst123!';
grant all privileges on *.* to 'root'@'%';
flush privileges;
------------------------------------------------

<webwas>
mysql -h dbms -u root -p 

-원격지에서 접속한 클라이언트에서 sql을 이용
1.DB생성
2.DB에 테이블 생성하며 간단한 데이터 입력
3.생성된 데이터베이스로의 접속상태를 웹에서 확인하기
4.이를 bash 에서 조작하기
5.DB를 클라우드에 설치하고 로컬 웹서버에서 연결하기


CREATE DATABASE test;
show databases;
use test;

create table member (memid int not null, lastname varchar(10), firstname varchar(20), mileage float, primary key (memid));

show tables ;
desc member ;

insert into member values (1,'hong','gildong',1000);
insert into member values (2,'kim','chulsoo',1000);

select * from member;
select mileage lastname from member;

본서버에도 생성되었는지확인

<WEBWAS>
vi /var/www/html/connect.php
---------------------------------------------------------------------
<?php
        $hostname = 'dbms';
        $user = 'root';
        $pass = 'TEst123!';
        $dbname = 'test';

        $mysqli = new mysqli($hostname, $user, $pass, $dbname);

        if($mysqli){
        echo " DataBase CONNECTED :) ";
        }else{
        echo "CONNECTION FAILED :( " ;
        }
?>

--------------------------------------------------------------------

웹브라우저에서 211.183.3.101/connect.php 확인

cd
mkdir bash
cd bash
touch test1.sh ; chmod 777 test1.sh ; vi test1.sh

vi test1.sh 
-----------------------------------------
read -p "what do you want ? : " name
mysql test -h dbms -u root -pTEst123! -e 'select * from member' | grep $name | gawk '{print $4}'
-----------------------------------------

<AWS로 DB 구성하기>

aws에서 DB를 구성한뒤 WEBWAS에서 연결해보기
mysql 로그인시 endpoint를 -h 에 넣어서 접속하기


--------------------------------------------------------------------------------
*서버가상화 Hyper visor > 프로젝트 (네트워크/리눅스/서버가상화)
간단한 웹개발(html,css,php,mysql) > 컨테이너 가상화(docker kubernetes[k8s]) 
> openstack > AWS,GCP > 이력서/자소서 준비 >vmware esx(vsphere)

<Cloud/virtualization>

AWS (아마존 웹 서비스)
-서버의 안정적인 운영을 위해 필요한 것들
1.안정적인 대역폭
2.서버의 트래픽 처리능력 
3.안정적인 전력공급
4.안정적인 항온 항습 유지 

계속해서 늘어나는 트래픽을 처리하기위해서 데이터 센터를 구축
데이터센터를 구축하고나서 남는 잉여자원들을 이용하여
외부에 재판매를 하기 시작하면서 시작됨

>Data center > 서버 등의 인프라가 확장되면서 공간/전력/발열문제 해결 안됨
> 그러던 와중에 x86서버에서 가상화가 가능해짐

초기 가상화는 mainframe(unix)만 가능했음 
2000년대 초반 AMD에서 AMD-V라는 기술을 기술을 내놓았고
이후 VMware가 VT-x라는 기술을 내놓았다.

>CPU가상화 기술로 하나의 CPU를 논리적으로 분할하여
각 가상머신들에게 제공할수 있는 기술이다.

전력을 낮출수있고, 공간효율성이 높아지며 인건비를 낮출수 있게됨
서비스 요청시 즉시 배포가 가능하다.
지역 간 이동(live migration)이 가능하여 서비스의 중단이 없다.

SOHO(small office/home office) > DataCenter > DataCenter(클라우드/가상화)

<클라우드의 분류/구분(NIST)>
-사용자에게 어떠한 서비스를 제공하는가에 따라서 3가지로 구분

IaaS(Infrastructure as a Service) : 물리적 자원 또는 인프라 환경을 클라우드에서 대신 제공 
ex) 서버자체, 라우터, 스위치, 방화벽, VPN 

PaaS(Platform as a Service) : 개발환경을 제공받는다. 특히 개발의 경우 개발환경/협업이 매우 중요함
이 경우 개발자 별로 다른환경에서 프로젝트 통합과정에서 매우많은 오류가 발생할수있다.
따라서 미리 개발환경을 동일하게 구성한다음 이를 개발자들에게 제공하여 동일환경에서 개발이 진행될수 있도록 구성
ex) docker, kubernetes, google app engine
*PaaS-ta 

SaaS(Software as a Service) : 소프트웨어를 클라우드 환경에 설치하고 이를 연결하여 사용
ex) 1.포토샵을 클라우드에 설치하고 이를 집과 회사에서 연결하여 사용
    2.파워포인트가 설치되어있지 않은 컴퓨터에서 GMAIL이나 구글드라이브에있는 파워포인트파일을
    열고 편집이 가능하다.

-Detail

IaaS : 인프라 환경을 클라우드에서 제공하는 것을 의미하며 물리서버위에
하이퍼바이저가 배치되며, 이하이퍼바이저에서 물리자원을 추상화하여 
가상자원을 제공하게 된다. 필수요건 : CPU 가상화지원 (AMD-V, VT-x)

가상화 
-CPU 가상화 : 물리적인 CPU를 논리적으로 분할하여 가상머신에게 제공하는 기술을
의미하며 가상머신에게 2개의 core를 제공했다면 가상머신은 스스로 자신이 2개의
물리 CPU를 가진것으로 착각한다.
> 서버 가상화. 데스크탑 가상화를 위한 필수 요소로 동작한다.

-네트워크 가상화 : VLAN, VRF(Virtual Routing  Forwarding)
*VRF> 라우터(라우팅테이블)를 가상화시키는 기술, 라우팅 테이블을 VLAN처럼 나누어줌

-서버 가상화 : 물리서버 하나에 하나의 서버 OS를 설치하여 운영하던 과거의 기술에서
물리서버하나에 HV를 설치하고 이를 이용하여 동시에 여러 서버를 운용할수있는 기술

-데스크탑 가상화 : 물리 PC하나에 하나의 OS를 설치하여 운영하던 과거의 기술에서
물리PC하나에 HV를 설치하고 이를 이용하여 동시에 여러 Desktop을 운용할수 있는기술
sync client PC 

*서버가상화와 데스크탑 가상화의 차이점

-스토리지 가상화 : 저장공간을 가상화하여 사용한다.
씬프로비저닝 기능을 이용하여 가상머신들에게 물리자원에서
제공하는 전체 저장공간보다 많은 양의 저장공간을 제공할 수 있다.
가상머신이 실제로 사용하는 공간이 물리 저장공간을 넘어설 수는 없다.
초기에 다수의 가상머신을 배포해야하는 경우에 적절히 사용할수 있는 기술


-서버가상화 : Hyper visor > type 1,2로 구분
HV가 어디에 배치되느냐에 따라 두개의 타입으로 구분된다.
일반적으로 서버 가상화를 가상머신을 만들고 가상머신 내에서
동작하는 APP은 서버위에 바로 배치되는 APP에 비해 성능저하가 30%정도 발생

type 1 : bare metal HV
물리자원 위에 HV배치됨, 기업에서 주로사용 (성능이 좋음)
ex) VMware ESXI, Linux KVM, XenServer

type 2 : Host Based HV
물리자원위 OS가 있고 그 위에 HV가 배치, 개인이 주로 사용 (성능저하 많음)
ex) VMware workstation, Oracle Virtual box, MS Virtual PC 

[KVM 실습환경 만들기]

필요자원
HV 2개
Storage 1개

vmware workstation에서
KVM 1,2 storage 생성

-VM spec

1.KVM1 
mem 6(6144)
processor 22 allcheck(vt-x)
nic 1 NAT
nic 2 VMnet1

2.KVM2
KVM1과 동일

3.stoage
mem 2(2048) 
processor 1 2 check none
nic 1 NAT
nic 2 VMnet1

설치 진행 
KVM1 nic1 ip 211.183.3.101 dg 211.183.3.2 dns 8.8.8.8
     nic2 ip 192.168.1.101 x   x

KVM2 nic1 ip 211.183.3.102 dg 211.183.3.2 dns 8.8.8.8
     nic2 ip 192.168.1.102 x   x

storage nic1 ip 211.183.3.254 dg 211.183.3.2 dns 8.8.8.8
        nic2 ip 192.168.1.254 x   x

설치후 KVM1,2는 인터페이스를 eth0,eth1 로 변경한다.
모든 노드는 방화벽과 SELINUX 중지시킨다 (재부팅이후에도 유지)
모든 노드의 /etc/hosts 에는 아래내용이 포함 
-------------------------------------------
192.168.1.101 kvm1
192.168.1.102 kvm2
192.168.1.254 storage
--------------------------------------------

 모든 설치과 완료되면 모든 노드에서 
   yum -y install vim git wget curl && yum -y update 

vi /etc/default/grub  -> 파일수정
ifcfg-ens32, ens33 -> ifcfg-eth0, eth1 로 변경, 내용수정
grub2-mkconfig -o /boot/grub2/grub.cfg
reboot

 kvm1, kvm2 는 그래픽 환경이 필요하다
 # yum -y groupinstall "Server with GUI"

재부팅 후
kvm1,2 에서
yum install -y qemu-kvm libvirt virt-install virt-manager virt-viewer openssh-askpass

qemu-kvm : 가상머신,가상네트워크 등과 KVM의 연결고리 
libvirtd :  리눅스의 physical자원 위에 kernel 에 설치됨(type 1) kvm HV의 데몬 (실제 데몬이름 = libvirtd)
virt-install : CLI 기반의 가상머신 생성 도구
virt-manager : 가상머신을 그래픽환경(GUI)에서 관리할수있도록 해주는 도구
openssh-askpass : 호스트간 연결을 통해 VM을 이동시킬 경우 상대방의 ssh로 연결하기위한 도구
virsh : 가상머신,가상네트워크,스토리지 등을 관리하기위한 CLI (가상머신 전용 shell)
virt-viewer : 가상머신의 화면을 볼수 있는 도구. VNC나 spice를 사용함

<KVM1,2>
GUI 터미널에서 
virt-manager &

file->add connection으로 두 가상머신을 서로 연결하기 
(auto-connection o)

가상머신의 구조
XML 영역과 DISK 영역으로 구분한다.

XML : 디스크, CPU, 네트워크 RAM, USB 등의 가상머신을 이루는 요소들을 
텍스트로 구성해 놓은 일종의 텍스트 파일

DISK : 가상머신의 드라이브 (하드디스크)역할을 하는곳



kvm을 설치하면 생성된 VM이 배치될수 있는 기본네트워크가 생성되는데
그것이default 네트워크이고 이를 연결하기위한 가상의 스위치가 만들어지는데
이 스위치의 이름이 바로 virbr0 이다 
virsh net-list로 default sw 상태 확인가능

virbr0는 192.168.122.0/24 네트워크로 구성되어있고 
관리용주소는 192.168.122.1이 자동할당됨
또한 해당 가상스위치는 NAT기능을 가지고있다.

virsh net-edit default 

<starage>
wget https://releases.ubuntu.com/18.04/ubuntu-18.04.5-live-server-amd64.iso

http://iso.linuxquestions.org/download/1964/10226/http/packages.vyos.net/vyos-1.1.8-amd64.iso

virt-install --name ubuntu01 --vcpus 1 --ram 1024 --network network:default --cdrom /vm/util/ubuntu-18.04.5-live-server-amd64.iso --disk path=/vm/ubuntu01.img,size=10

KVM1 에서 ubuntu 설치후 KVM2의 vrit manager 에서  ubuntu가 있는지 확인

reboot한뒤 sudo passwd root로 root password지정후 root로 로그인

ping 8.8.8.8로 계속 보내도록 해둔 다음 migrate해보기 (allow unsafe) 

kvm2에서 virsh migrate --live ubuntu01 qemu+ssh://kvm1/system --unsafe


virsh list --all 

virsh dumpxml ubuntu01 > cat으로 xml파일 반환
virsh edit ubuntu01 > vi 편집기로 xml파일 수정가능
vcpu를 2로 바꿔보기 

virsh start ubuntu01 
virt-viewer 4


KVM 관리 툴 
virt manager on linux 
각 kvm호스트에 kimchi를 설치하고 윈도우 리눅스 MACos 등 
외부관리 운영체제에서 웹브라우저를 통해 접속이 가능하다
KVM1 KVM2에 wok를 이용한 kimchi설치
https://atl.kr/dokuwiki/doku.php/kvm_-_wok_kimchi_manager

https://192.168.1.101:8001
https://192.168.1.102:8001

virsh destroy ubuntu01 > 가상머신을 중지시킴(제거가 아님)


virsh undefine ubuntu01 > 가상머신 삭제시키기


vi /etc/network-scrips/ifcfg-xx
-------------------------------

NM_CONTROLLED=no 
-------------------------------
>network manager의 실행여부를 표기

일반적인 서버에서는 사용할일이 거의 없으며 보통 데스크탑용으로
그래픽환경이 필요한 곳에서 사용한다. GUI관리 페이지에서 IP변경시
별도의 demon재실행이 없더라도 변경사항을 시스템에 즉시 반영하는경우
혹은 무선연결등에 사용

서버의 경우에는 이를 이용하지않고 일반적으로 파일변경
혹은 데몬 재실행을 이용하여 네트워크 환경을 변경하므로 실행할 필요가없음

설정파일에서 변경시에는 
NM_CONTROLLED=no
데몬을 통해서 중지시에는
systemctl stop NetworkManager


bare-metal type의 HV : 서버위에 직접 설치
qemu-kvm : HV에게 VM의 말을 전해주는 역할
(커널은 vm의 말을 직접 알아들을수 없음)


-kvm을 동작시키기 위한 데몬 : libvirtd

-vm 가상 네트워크 관리도구
GUI : virt-manager, kimchi(wokd)
CLI : virsh

CLI 기반으로 VM설치 : virt-install
가상머신, 네트워크 관리를 위한 쉘 : virsh

virbr0(192.168.122.1(
kvm을 설치하면 자동으로 virbr0라는 브릿지가 설치되고 
이는 default network(192.168.122.0/24)에 연결하기 위한 용도로 사용


만약 kvm상에 있는 가상머신들이 외부(인터넷)으로 나가는 경우
virbr0에서 공인ip와 연결되어있는 포트로 이동한뒤
NAT되어 공인ip로 변경되어 나가게된다.

(반대로 들어와야하는 경우, 포트포워딩이 필요하다 예상됨)

vyos > debian 기반의 오픈소스 방화벽/라우터/VPN기능을 갖는 소프트웨어 장치

서버렉은 TOR 스위치가 가장위에 존재하고 아래에 서버들이 존재
TOR스위치는 하나의 방화벽과 직접 연결된 포트와 다른 스위치와 연결된 포트
나머지 서버들과 연결된 포트로 구성됨

KVM의 VM구성
|XML | 	DISK  |
disk 파일의 예시 : ubuntu01.img

-virsh 을 통해 vm설치
virt-install --name ubuntu01 --ram 1024 --vcpus 1 \
disk path=/var/lib/libvert/qemu/ubuntu1.img.size=10 \
--network bridge=virbr0 --graphics vnc,port=5999 \
--cdrom /ubuntu.iso

> 10g의 diskfile을 만들어두고 vm을 만들겠다.

--graphics 
> vm을 그래픽을 띄워주는 역할을 하는것이 virt-viewer임
virt-viewer는 스파이스나 vnc를 이용함
5900번 포트를 사용함 (포트 내용을 생략하면 랜덤포트로 설정)




[실습]
vyos iso파일을 NFS 디렉토리의 util에 넣는다.

kvm1에서 
virt-install --name fw1 --vcpus 1 --ram 512 \
--network network:default --graphics vnc,port=5901 \
--disk path=/vm/fw1.img,size=5 \
--cdrom /vm/util/vyosxxxxx.iso

> 새창이 뜨면서 vyos가 설치됨

vyos에서
vyos/vyos로 로그인

install system
파티션=auto
sda에 설치
루트파티션은 5g전부 할당
설정내용 저장
vyos 패스워드 test123
GRUB 수정 > sda 

reboot

config
set interface ethernet eth0 address 192.168.122.101/24 
run show int 
commit > 설정 변경을 적용하기

ping 192.168.122.1
ping 8.8.8.8 > 불가능

set protocal static route 0.0.0.0/0 next-hop 192.168.122.1 
commit
ping 8.8.8.8
save > 재부팅이후에도 설정값이 유지됨


만약 밖으로 나가지않는경우
kvm1에서 
cat /proc/sys/net/ipv4/ip_forward가 1로 되어있는지 확인
> 생성된 가상머신이 외부로 연결이 되지않는다면 시스템에서 
forward기능을 활성화 해주어야 함
/proc/sys/net/ipv4/ip_forward 가 0이면 forward기능 비활성화 상태이므로
1로 바꾸어주어야한다.
ex) echo "1" > /proc/sys/net/ipv4/ip_forward


kvm1에서 두번째 vyos생성
virt-install --name fw2 --vcpus 1 --ram 512 \
--network network:default --graphics none\
--disk path=/vm/fw2.img,size=5 \
--cdrom /vm/util/vyosxxxxx.iso

>따로 새로운 창이 뜨지않고 바로 vyos로 연결됨

다른 터미널을 띄워서 virsh list --all로 실행중인지 확인

virsh console [vm id or name]
>콘솔로 vm을 연결

[vyos2 int 설정]

config
set interface ethernet eth0 address 192.168.122.102/24 
set protocal static route 0.0.0.0/0 next-hop 192.168.122.1 
commit

vyos1,2가 서로 ping이 가는지 확인하기

-kvm 관리를 위한 명령어--
virsh list : 동작중인 가상머신확인
virsh list --all : 동작,중지중인 모든 가상머신확인
*가상머신을 만들때 ID,name은 unqiue해야한다
ID는 가상머신 실행시마다 kvm에서 자동으로 할당해준다

virsh console fw1 : fw1 가상머신으로 콘솔연결하기

virsh destroy fw2 : fw2 가상머신을 강제로 종료한다.

virsh start fw2 : fw2 가상머신을 시작시킴

virsh dumpxml fw2 : fw2의 xml파일을 출력
(cat으로 파일보기와 같음, 리다이렉션으로 다른파일로 저장가능)

virsh edit fw2 : fw2의 xml파일을 vi 편집기로 열기(수정도가능)

virsh undefine fw2 : fw2를 삭제 (디스크는 삭제되지않는다)
(강제로 삭제해야만 지워지게됨)

virsh net-list --all : 동작중, 중지중인 모든 네트워크 확인

virsh net-edit default : default네트워크 편집

-kvm의 네트워크-
vmware
1.bridge
2.NAT
3.host-only

KVM 
1.bridge
2.NAT
3.isolated network

[실습]-새로운 isolated network 만들기

virsh net-edit default > default.txt
cp default.txt apple.xml

vi apple.xml
----------------------------------------
nat관련 설정 모두 삭제
uuid, mac주소 삭제 (자동할당됨)
<birdge name='virbr1'/>
ip 대역을 172.16.1.1 로 변경
(DHCP > 172.16.1.101 ~119)
---------------------------------------

virsh net-define apple.xml 

virsh net-list --all 

virsh net-start apple

virsh net-autostart apple

virsh net-dumpxml apple

[실습] -동작중인 가상머신에 새 인터페이스를 부착시키기

kvm에서
virsh attach-interface --domain fw1 --source apple \
--type network --model virtio --config --live 

(--model virtio : virt input output
 --config : 재부팅이되어도 설정값을 유지
 --live : 가상머신이 동작중인상태에서 연결하겠다.)


vyos에 가서 새로운 인터페이스 부착되었는지 확인
(show int)

config
set int eth eth1 add dhcp
commit

run show int

ping 172.16.1.1

[실습] live migration

virsh migrate --live fw1 qemu+ssh://192.168.1.102/system --unsafe


------------------------------------------------------------------

기존 eth0 는 ip주소가 등록된 L3 포트 이므로 가상네트워크와는 별도의
네트워크로 분리된다 만약 가상의 스위치를 만들고 centos 의 eth0을 
이 가상 스위치에 연결하고 해당 가상스위치에 또 다른 서버를 연결한다면
전체가 동일한 네트워크로 구성된다  즉, ISP부터 서버까지 동일주소인
211.183.3.0/24로 구성할수 있다.

[실습]
kvm1 
cd /etc/sysconfig/network-scripts

systemctl stop NetworkManager
systemctl disable NetworkManager

cp ifcfg-eth0 ifcfg-br0

vi ifcfg-br0
-----------------------------------------------------
TYPE=Bridge
BOOTPROTO=none
NAME=br0
DEVICE=br0
ONBOOT=yes
IPADDR=211.183.3.101
PREFIX=24
GATEWAY=211.183.3.2
DNS1=8.8.8.8
NM_CONTROLLED=no
-----------------------------------------------------

vi ifcfg-eth0
------------------------------------------------------
TYPE=Ethernet
BOOTPROTO=none
NAME=eth0
DEVICE=eth0
ONBOOT=yes
BRIDGE=br0
NM_CONTROLLED=no
-------------------------------------------------------
> br0의 포트로서 동작시키겠다.


systemctl restart network를 통해 br0에 ip주소 211.183.3.101이 
등록되어있는지 여부와 인터넷 연결상태 확인


virsh destory fw1 fw2
virsh undifne fw1 fw2

virt-install --name websrv1 --vcpus 1 --ram 1024 \
--graphics vnc,port=5911 --network bridge=br0 --disk path=/vm/websrv1.img,size=20 \
--cdrom /vm/util/Centos-7-x86_64-Minimal-2009.iso

websrv1 network configure 
ip add 211.183.3.111/24
gateway 211.183.3.2
dns 8.8.8.8

설치 완료후 ip add 확인

yum install -y httpd

웹서버를 만들고
윈도우 10 에서 211.183.3.111로 웹서버 접속 확인

*템플릿 생성하기
websrv 
yum -y install git

git clone 주소
global이 생성되면
211.183.3.111/global 


[실습]
kvm1에서 DNS 서버 구축하기

현재 KVM1에는  가상머신 websrv1이 설치되어있음
추가적으로 Centos 이미지를 이용하여 cpu1, ram 1 disk size 20G
ip add 211.183.3.112로 지정한 가상머신의 이름 dnssrv를 생성하라

virt-install --name dnssrv1 --vcpus 1 --ram 1024 \
--graphics vnc --network bridge=br0 --disk path=/vm/websrv1.img,size=20 \
--cdrom /vm/util/Centos-7-x86_64-Minimal-2009.iso


virt-install --name dnssrv1 --vcpus 1 --ram 1024 \
--graphics vnc --network bridge=br0 --disk path=/vm/websrv1.img,size=10 \
--cdrom 


설치 완료후 윈도우에서 ping 211.183.3.111, 211.183.3.112 확인

*DNS서버는 대표적으로 아래와 같은 두가지 기능을 수행한다.

chche name server :자체적으로 관리하는 도메인은 없으며 요청이 들어왔을경우
자신이 지정해놓은 DNS서버로 PC대신 요청을 하는 징검다리 역할을 하는 DNS서버
별도의 기능을 하는 것은 아니며 단지 대신 도메인에 대한 IP주소를 얻어온다음
해당 정보를 자신의 캐시에 담아두고 나중에 동일한 정보를 요청할경우 자신의 캐시에서
정보를 전달해주는 역할을 수행한다.

master name server : 회사 자체적으로 사용하는 도메인을 관리하는 DNS서버
서브도메인 등에 대한 정보를 zone파일에 작성해주도 이를 통해 서브도메인에 대한
IP정보를 클라이언트에게 전달해주는 역할을 수행한다.


DNS-server에서
yum install -y bind bind-chroot

vi /etc/sysconfig/network-scripts/ifcfg-ens3 
DNS1=127.0.0.1
DNS2=8.8.8.8

firewall stop disable

vi /etc/named.conf 
-------------------------------------------
any none any

dnssec-validation no;
-------------------------------------------
systemctl restart named

websrv1에서 
vi /etc/sysconfig/network-scripts/ifcfg-ens3 
DNS1=211.183.3.112

systemctl restart network

cat /etc/resolv.conf

yum install -y curl 

curl http://www.keduit.com | head


DNS-server에서
vi named.conf 
------------------------------
맨 아래에 추가
zone "ciw0707.pri" IN {
	type master;
	file "ciw0707.pri.db";
	allow-update { none; } ;
};
----------------------------------- 

cd /var/named/

touch ciw0707.pri.db
vi ciw0707.pri.db

------------------------------------------------
$TTL		3H
@	SOA	@	root.	(2 1D 1H 1W 1H )
	IN 	NS 	@
	IN 	A	211.183.3.112
www	IN 	A	211.183.3.111
test	IN	A	211.183.3.1
-------------------------------------------------
named-checkzone ciw0707.pri.db ciw0707.pri.db


systemctl restart named


websrv1에서 
curl http://www.ciw0707.pri

ping test.ciw0707.pri


[실습] aws 실습

ec2 

ubuntu 18.04.lts 64bit 선택

인스턴스개수 1개
검토 및 시작

보안그룹 편집
규칙추가 
http추가 
검토및 시작
시작하기 

키페어
키페어 이름 ciw0707
키페어 다운로드

퍼블릭 ip 복사

ping 되는지 확인

puttygen에서 import key로 다운로드한 키파일 불러오기
save private key 
ciw0707로 바탕화면에 저장

putty실행후 ssh 인증탭
인증 개인키파일에 방금 저장한 바탕화면의 파일 불러오기

공인아이피를 사용해 ssh접속하기
(ubuntu로 접속)

sudo apt-get install apache2

웹브라우저를 사용해 공인아이피로 웹서버에 접속해보기

인스턴스 종료후 제거

wget https://ftp.zetta.net.au/pub/linux/vyos/iso/release/1.1.8/vyos-1.1.8-amd64.iso 
wget http://ftp.kaist.ac.kr/CentOS/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso 
-----------------------------------------------------------------------------------

instance 는 일종의 기본 템플릿을 만들고 이 템플릿을 이용하여
가상머신을 생성하는 형태, 설치가 이미 되어있는 가상머신을 이미지화 하고
이를 배포하는 형식으로 가상머신을 생성할수 있다.

[실습]aws 에서 인스턴스 생성

인스턴스의 퍼블릭 ipv4
인스턴스를 종료한뒤 다시실행하면 바뀌게 된다.

탄력적 IP > ip를 고정시킴

ping이 불가능하면 > 보안그룹에서 ICMP추가시키기

*gabia > 퍼블릭 도메인과 DNS서비스 제공

ssh key 값을 저장한뒤 putty keygen 으로 key설정

sudo apt-get install apache2 로 웹서버 설치

vi /var/www/html/index.html

웹서버를 구성한뒤 윈10브라우저로 확인해보기

[실습]
-클라우드 이미지를 이용하여 루트 패스워드 설정한뒤 
storage에서


wget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-2009.qcow2
cp CentOS-7-x86_64-GenericCloud-2009.qcow2 CentOS-2009-1.qcow2
cp CentOS-7-x86_64-GenericCloud-2009.qcow2 CentOS-2009-2.qcow2


chmod-R  777 /vm 

kvm1에서
export LIBGUESTFS_BACKED=direct
yum install libguestfs-tools

vi /etc/libvirt/qemu.conf

user = "username"
group = "kvm"

virt-customize -a /vm/util/CentOS-2009-1.qcow2 --root-password password:test123
virt-install --name centos01 --vcpus 1 --ram 1024 --graphics vnc --disk path=/vm/util/CentOS-2009-1.qcow2 --import

설치과정 안내
1. 기본 클라우드 이미지 를 복사하여 별도로 준비한다.
  copy CentOS-....qcow2 CentOS-2009-1.qcow2  
  "CentOS-2009-1.qcow2 가 새로운 인스턴스의 디스크 역할을 하게 됨"

2. 복사된 이미지의 root 패스워드를 설정한다
3. 설정된 최종 이미지(CentOS-2009-1.qcow2) 를 이용하여 "배포" 한다
virt-install --name centos01 --vcpus 1 --ram 1024 --graphics vnc --disk path=/vm/util/CentOS-2009-1.qcow2 --import



Quiz. KVM2 에서 CentOS-2009-2.qcow2 이미지에 root 패스워드를 test111 로 수정하고 이를 배포하라!!!
단, cpu=1, ram=1G

[결과]
기존 qcow2 이미지를 이용하여 새로운 인스턴스가 생성되었다. 
하지만 qcow2이미지 자체가 디스크로 활용되므로 전체 디스크 size는 900MB 밖에 사용할수 없음
VM배포가 인스턴스를 활용하므로 설치과정이 생략되어 편리하지만 디스크 용량이 매우작으므로
이를 실제로 활용하는것은 어려운 일이다.

이를 해결하기위해 두가지 방법을 사용할수있다.

1. 900MB +추가디스크
ex) qemu-img create -f raw -o size=10G /vm/util/ubuntu.img

qemu-img create -f qcow2 -o size=5GB /vm/util/add5g.qcow2
virt-install --name centos001 --vcpus 1 --ram 1024 --network network:default --disk path=/vm/util/CentOS-2009-1.qcow2 --disk path=/vm/util/add5g.qcow2 --import

ls /dev/sd* 로 sdb가 추가되어있는지 확인

[실습] - vm 인스턴스 생성 스크립트 만들기

#! /bin/bash

read -p "vm name? : " name1
read -p "vm's cpu? : " cpu1
read -p "vm's ram? : " ram1
read -p "root password? : " pwd1
read -p "another disk size ? : " disk1

qemu-img create -f qcow2 -o size=${disk1}GB /vm/util/add${name1}g.qcow2

virt-customize -a /vm/util/CentOS-2009-1.qcow2 --root-password password:$pwd1
virt-install --name $name1 --vcpus $cpu1 --ram $ram1 --graphics vnc --disk path=/vm/util/add${name1}g.qcow2 --import


2.virt-builder 를 이용하기

-첫번째 방법은 sda 디스크가 800MB~1G 정도로 매우작다
하지만 실제 클라우드상에서 인스턴스를 동작할때 위와같이 sda를 1GB정도로 
구성하는 경우는 없다.
그러므로 디스크의 사이즈 자체를 수정할수 있어야함.

virt-builder 는 인터넷상에서 디스크 사이즈 수정이 가능한 이미지를 다운로드하여
디스크사이즈도 수정하고 패스워드도 수정할수 있는 방법이다.


virt-builder -l 로 다운로드 가능한 클라우드 이미지 목록 확인 가능

-KVM2에서 시작

yum -y install libguestfs-xfs 
export LIBGUESTFS_BACKED=direct > 전역변수를 선언하기

virt-builder centos-7.8 --format qcow2 --size 20G \
-o /vm/util/centos78.qcow2 --root-password password:test123

생성된 이미지를 이용해 인스턴스 생성
virt-install --name centos78 --vcpus 1 --ram 1024 \
--network bridge=br0 --graphics none --serial pty --console pty \
--disk path=/vm/util/centos78.qcow2 --import

> 생성되면서 바로 console 연결됨


--------------------------------------------------------------

virsh net-dumpxml default >testnat.xml
vi testnat.xml

<network>
  <name>NAT1</name>
  <forward mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
  </forward>
  <bridge name='virbr10'/>
  <ip address='192.168.222.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.222.2' end='192.168.222.254'/>
    </dhcp>
  </ip>
</network>

virsh net-define testnat.xml 

virsh net-start nat1

virsh net-autostart NAT1

*shellinabox > 웹상에서 ssh접속가능하게 해주는 패키지
yum install -y shellinabox 
systemctl restart sheelinaboxd
루트 로그인이 불가능하면 /var/log/secure파일을 참고하여
 /etc/securetty 파일을 수정하기 

[실습] - kvm의 vm 스냅샷만들기
*shutoff 상태에서 스냅샷을 만들면 빠르게 찍히므로
가능한 한 종료상태에서 진행하기 

virsh snapshot-create centos78
virsh snapshot-list centos78

virsh snapshot-create-as centos78 --name "firstsnapshot"
>현재 centos78의 상태를 스냅샷이름을 지정해서 만들기

virsh snapshot-revert centos78 --snapshotname firstsnapshot
>centos78을 스냅샷 시점으로 되돌리기



SDN : software defined network 
L3스위치의 control plain을 외부에있는 컨트롤러로 연결하고
컨트롤러에서 각장비에 필요한 기능을 구현하여 전송시킨다.
일반적으로 이러한 스위치는 오픈소스로 구성되는 경우가 많으나,
특정벤더사에서 출시한 제품도 있음 
물론 이러한 벤더사의 제품도 오픈소스를 이용하여 구현하는경우가 대부분

SDN은 그효과를 극대화하기위해 NFV와 함께 기능을 구현하는 경우가 많다.
NFV(Network Functions Virtualization)은 과거의 물리적 장비로
동작하던 방화벽,스위치,라우터 등을 소프트웨어(가상화) 형태로 동작시키는 것을 의미함

기존의 물리적 장비로 동작하던 L3스위치를 오픈소스에서 동작시키려면??
이 스위치는 SDN이 지원되어야한다.
ex) OpenvSwitch(ovs)
*openflow > sdn지원 프로토콜

ifcfg-br0
BRIDGE=br0
> linux bridge : L2기능만가짐 (vlan을 사용할수 없으므로 클라우드상에서 사용하기 힘듬)


[프로젝트]
keduit 클라우드 데이터 센터 구축 프로젝트
월,화,수,목,금,토,일(월요일 오후에 발표)
월 : 자료수집 및 토의
화 : 기본인프라 환경구성
수목금 : 프로젝트 진행 , 추가요소 구성
토일 : ppt작성
다음주 월요일 프로젝트 발표(개인당 5분씩)

LB는 인터넷과 직접 연결되는 연결되는 네트워크와 KVM1,KVM2와 연결되는 
인터페이스 2개로 구성되어있다.

KVM1, KVM2는 LB의 backend 인터페이스와 STG와 연결되는 인터페이스를 갖는다.
STG는 스토리지 이며 외부와의 직접연결은 없음, 오직 kvm1,2의 backend 인터페이스와만 연결된다.

LB의 frontend 주소는 10.5.1.x(bridge)를 사용함 (203번 사용)
(비대면의 경우에는 실제 컴퓨터와 동일주소 아무거나 사용)

kvm 1,2는 HV(KVM)이 설치되어있으며 내부개발자들이 필요할때 
서버를 생성하기위해 사용함

가상머신은 인스턴스 형태로 설치되어야하며(클라우드 이미지를 사용해야함)
vm spec : cpu 1 ram 1g disk 10gb

가상머신(인스턴스) 4대는 KVM1에 두대 KVM2에 두대가 배치되고
지역간 이동이 가능해야함 

또한 이 인스턴스들은 STG의 특정 디렉토리를 동시에 마운트하여 index.html파일을 공유함

외부사용자들은 LB의 frontend 주소로 웹접속을 시도하면 내부에서 동작중인 
인스턴스로 웹접속이 가능하게된다 . 이때 인스턴스들은 80번이아닌 8080에서 웹서비스를 제공함

인스턴스로의 직접적인 웹접속은 외부에서 불가하다. 반드시 LB를 통해서만
접속할수 있어야함

STG도 index.html파일이 보관된 디렉토리로 접속은 오직 KVM에 있는 인스턴스에서만
가능해야함

-추가요소 구성(택1 이상)
1.가상머신(인스턴스)들의 트래픽상태를 확인할수있는 모니터링 도구가있어야함
해당 모니터링도구는 zabbix또는 catci를 이용할수 있음(NMS)

2.설치된 인스턴스들은 모두 웹서버이다 
외부에서 웹접속시 불법적인 접근이나 요청이 들어온다면 이를 차단하기 위한
웹 방화벽(인스턴스)을 구축하라. (mod security)

3.위의 기본 프로젝트가 모두 끝난뒤, 
--10.5.1.x----LB----------------- 왼쪽 구조를 아래와 같이 변경한다.

--10.5.1.x----vyos ----LB ---------- 
내부에있는 LB가 인터넷으로 연결이 가능해야함
방화벽도 외부에서 ssh연결이 가능해야함

4. bash를 사용하여 인스턴스 생성을위한 스크립트를 작성하고
이를 통해 인스턴스가 설치되도록하라
단, 클라우드 이미지는 2개정도만 사용하여 부담을 줄일것
스트립트 실행시 아래와 같이 동작해야한다.
----------------------------------------------------------
*1번만 동작하게끔 작성
설치할 운영체제? (번호선택) : 
-list 
1. CentOS 7.8
2. Ubuntu 18.04 

flaver 선택 (번호선택) ? :
1. cpu 1, RAM 1G , 10G disk 
2. cpu 2, RAM 2G , 20G disk 

루트 패스워드 지정 : 

네트워크 지정 (번호선택) :
1.Bridge 
2.NAT(default)
3.isolated(testnet)

설치 확인
-설치될 운영체제 : CentOS 7.8
-flaver : cpu 1, RAM 1G , 10G disk 
-루트 패스워드 : test123
-네트워크 : Bridge 

설치하시겠습니까 ? [y/n] : 
(그냥 엔터는 취소 y또는 yes,YES를 입력해야 설치가 진행되도록)

설치가 진행되는 동안 vnc로 연결되도록 한다.

-5. 기타 : 자신이 희망하는 것 넣기


-------------------html -------------------------------
<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<p>HELLO</P> <p> world</p>
	
	
	</body>
</html>

[결과]
테스트중 
-----------------------
HELLO
world 
----------------------

<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<p>
	<h1>이것은h1</h1><h2>이것은 h2</h2> 이것은 h4</h4>
	</p>
	</body>
</html>

[결과]
테스트중 
-----------------------
이것은h1
이것은 h2
이것은 h4
----------------------
> 모두 하나의<p>(단락이고) 각 행마다 하나씩 h옵션이 들어감


<b> 볼드체
<strong> 
<code>

-리스트만들기
<ul>  > 앞에 기호를 붙임
 <li>aa</li>
</ul>

<ol> > 앞에 숫자를 붙임
 <li>aa</li>
</ol>


-하이퍼링크-

<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<a href="http://www.googel.com" target="_self">구글1</a><br>
	<a href="http://www.googel.com" target="_blank">구글2</a>	<br>
	<a href="http://www.googel.com">구글3 </a><br>
	<a href="a.html " >a.html</a>
	</body>
</html>

[결과]
구글1 > 현재페이지에서 구글이 열림
구글2 > 새로운창이 열리고 구글이 열림
구글3 > 구글1과 동일 (target이 없으면 default값은 _self 이다)

<a href="a.html " >a.html</a>

경로에 따른 파일 설정

./a.txt  > html파일 위치에 있는 a.txt파일 지정
../a.txt  > html파일 상위디렉토리에 있는 a.txt파일 지정

<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<a href="#sec1">참고사항으로 이동 </a><hr>
	<a href="#bottom">아래로 이동 </a><hr>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<a id="sec1">참고사항 </a> 
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<p>...</P>
	<a id="bottom">copyright</a>
	</body>
</html>


<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<h2>수리산</h2>
	<hr>
	<img src="san.jpg" width="500" height="200" alt="수리산">
	</body>
</html>

san.jpg의 사본을 만들고 그림판에서 크기를 50으로 조정

<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<h2>수리산</h2>
	<hr>
	<a href="san.jpg" target="_blank"> 
	<img src="th_san.jpg" width="500" height="200" alt="수리산">
	</body>
</html>

w3schools.com > 여러 언어를 배울수있는 사이트

<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
	<h2> 자주가는 사이트 </h2>
	<iframe src="http://www.naver.com" width="300" height="120"></iframe>
	<iframe src="http://www.daum.net" width="300" height="120"></iframe>
	<iframe src="a.html" width="300" height="120"></iframe>
	</body>
</html>

<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
		<div style="height:20px; background-color:yellow"></div>
		<div style="height:20px; background-color:black"></div>
		<div style="height:20px; background-color:red"></div>
	</body>
</html>


<html>
	<head>
		<title>테스트중</title>
	<head>
	<body>
		<form action="input.php" method="post">
		<input type="text" name="input"/>
		<input type="submit">
	</body>
</html>

> 사용자로부터 값을 받아서 WAS에 보내주는것이 가능함


--- 고민한번 해 보세요! ---------------------------------------------
virt-builder , virt-install 등을 이용하여 아래의 조건을 만족하는 프로젝트를 진행하세요~

크기는 20G.. 선택가능해야하고
가상머신의 host 명 지정 가능

선택 옵션 : 
httpd, git , wget 설치되어야 한다. 

설치가 완료된 후에는 httpd 는 자동으로 설행되어야 하며 외부에서 접근가능
해야한다.  단, 웹페이지는 기본 페이지가 아니라 여러분들이 직접 만든 웹페이지를 인터넷상에 두고 이를 끌어와야 한다! -> github 을 이용해 보세요!!

또한 selinux 는 중지되어 있어야 한다!!

추가적으로 5GB 의 추가 디스크도 연결되어 있어야 한다.

이를 완성하라. 
------------------------------------------------------------------------

gre 터널 뚫는법
https://www.vultr.com/docs/how-to-establish-a-gre-tunnel-between-two-centos-7-servers




