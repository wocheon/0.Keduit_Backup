
AWS

-내 보안자격증명에서 엑세스키를 하나 생성하기

액세스 키 ID:
AKIA46DERPS74JUCNJRC
보안 액세스 키:
+2xDmVucBkD6cjrW3bCInINzU0bXZuOOt6ivkITE

apt-get -y install python-pip python-pip

python -v

snap install aws-cli

root@master:~/k8s_work# aws configure
AWS Access Key ID [****************NJRC]: AKIA46DERPS74JUCNJRC
AWS Secret Access Key [****************kITE]: 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
Default region name [None]: ap-northeast-2
Default output format [None]:


aws s3 ls
aws s3 sync aws s3://ciw0707-web-site-s3

touch aws/hello.txt

root@master:~# aws s3 sync aws s3://ciw0707-web-site-s3
upload: aws/hello.txt to s3://ciw0707-web-site-s3/hello.txt

aws s3 mb s3://ciw0707-s3-test
make_bucket: ciw0707-s3-test
root@master:~# aws s3 ls
2021-05-27 01:25:27 ciw0707-s3-test
2021-05-27 00:32:47 ciw0707-web-site-s3


EC2

AMI ec2 인스턴스 생성을 위한 이미지 저장소
aws에서 제공하는 이미지 ( aws자체 벤더사에서 등록한 유로 이미지)
자체적으로 제작한 이미지 (기본 이미지 > ec2 배포 > 필요내용설정/구성> 해당인스턴스를 이미지화)

EBS (Elastic Block Storage) > block storage, 인스턴스 생성시 기본적으로 EBS를 사용하여 볼륨을 생성

SG (Security Group) > 인스턴스에 직접연결

탄력적 IP(elastic IP) > 인스턴스를 생성하면 기본적으로 사설 네트워크(VPC)에 자동으로 배치되고 사설주소를 할당 받음
하지만 외부와의 연결을 위해서는 공인주소가 필요한데
기본적으로 인스턴스 생성시 공인주소를 DHCP로 할당 받는다  이는 고정되지 않고
재부팅시에는 변경되지않지만 중지> 재실행시에는 변경된다 
이를 고정하여 사용하고 싶은경우 탄력적IP를 사용한다.

키페어 : 인스턴스생성시 하나의 키쌍을 생성하고 인스턴스내부에는 pubilc key를 삽입
사용자는 private를 사용ㅇ하여 해당인스턴스 접속가능 ec2-user가 기본사용자명으로 만들어짐

로드밸런서 : 부하분산기

auto scaling (추가 선택요소)

cloudwatch > 어떤 이미지에 대해서 모니터링하고 사용량이 어떤 수준에 도달하면 EC2에 알람을 보내서 
auto scaling기능을 수행 (kubernetes의 metric서버 기능과 유사)

ec2로 인스턴스를 생성시 위의 요소들을 추가하여야한다.

*IOPS : 볼륨이 지원할수있는 요청된 초당 I/O 작업 수 > 높을수록 처리속도가 빠르다 

ec2생성후 key를 받아서 putty로 실행 ( amazon linux)
로그인 : ec2-user

인스턴스 종료 > 인스턴스 삭제

-네트워킹 
VPC > 사설네트워크
만약 인스턴스생성시 선택하지않는다면 Default 서브넷에 자동으로 할당된다.

-선택 가능 목록
1.단일 퍼블릭 서브넷이 있는 VPC
2.퍼블릭 및 프라이빗 서브넷이 있는 VPC
3.퍼블릭 및 프라이빗 서브넷이 있고 하드웨어 VPN 액세스를 제공하는 VPC > onpremise서버와 private 서브넷을 VPN통해서 연결
4.프라이빗 서브넷만 있고 하드웨어 VPN 액세스를 제공하는 VPC > 인터넷 연결을 배제, 회사 자체의 웹서버를 사용

*같은데이터센터간에 연결된 네트워크는 연결비용 지불 X
  다른 데이터센터간 연결된 네트워크는 연결비용 지불 필요

openstack 의 Floating IP 
오픈스택의 인스턴스는 생성시 사설주소 부여되며 별도의 공인주소는 부여되지않는다.
(옵션 선택시에는 가능함), flaoting IP를 할당하면 무조건 고정

aws Elastic IP 
인스턴스의 생성과 동시에 사설주소와 공인주소를 할당할수 있으나 해당 공인주소는 고정x
이를 고정하기 위한 목적으로 Elastic IP를 사용함


Cloud Front : 일종의 캐싱서비스

Route 53 : 일종의 DNS서비스

프리티어 라이센스에서는 DB의 Multi AZ구성이 지원되지않는다.


[실습1 ]
1.EC2를 이용하여  웹서버를 만들고 이미지 생성하고 인스턴스 생성

-EC2 Amazon Linux로 EC2생성후 Httpd설치
index.html만들기

-httpd는 8001포트에서 동작하도록 변경

-이미지 생성을 통해 이미지를 생성하고 
해당 이미지를 가지고 인스턴스를 2개생성

LB와 연결하기
LB는 기타 버전을 사용하여 생성
인스턴스의 8001포트와 LB의 80포트를 연결하기 




그후 가비아를 통해 주소 할당

[실습2]
VPC 생성
WEB-VPC  10.0.0.0/16

서브넷 생성
ELB-SUBNET                       10.0.2.0/24
WEB-SUBNET                      10.0.1.0/24
RDS-MASTER-SUBNET       10.0.100.0/24
RDS-SLAVE-SUBNET          10.0.200.0/24
> RDS-MASTER 와 SLAVE는 서로 가용영역이 다르게 설정되어야한다.

DB서브넷 생성 
RDS-Subnet 

RDS-MASTER-SUBNET , RDS-SLAVE-SUBNET포함시키기

인터넷 게이트웨이 생성 > WEB-IGW
WEB-VPC에 연결하기 

라우팅테이블 생성
WEB-IGW-VPC 
VPC : WEB-VPC
라우팅 편집 
대상 0.0.0.0/0
대상 WEB-IGW

서브넷에서 
ELB-SUBNET의 라우팅테이블 변경 > WEB-IGW-VPC

보안 그룹 생성

WEB-SG
ssh -10.0.2.0/24
 ( 인터넷연결이없으므로 인터넷상에서 ssh로 LB쪽으로 접속하고
 LB쪽에있는 관리용 인스턴스에서 ssh로 다시 접속해야함)

> 이후내용은 프로젝트로 기록하였으므로 
블로그 글을 확인할것



네트워크 ACL : 차단에 중점
보안그룹 : 허용에 중점

Region(데이터 센터가 연결된 가상의 그룹 > 국가 ) > AZ(Ability Zone, 실제 물리적인 데이터센터, 모두 이중화되어있음 )
우리나라에는 AWS datacenter 자체가 들어온것은아니며 대여해서 사용함
a-일산 b-목동(KT) c-용인

AWS 기본서비스
EC2
RDS 관계형 DynamoDB(NoSWAL)
VPC (Virtual Private Cloud)


Lamda(computing 서비스): serverless서비스
함수에의해 특정서비스를 호출하는 서비스특정상황이 되거나 특정 입력이
들어오게되면 사전에 코딩해둔 함수가 실행되는 서비스
서버위에서 실행되나 사용자는 서벙에대한 관리권한이 없는 완전 관리형서비스
실제 서버는 aws의 아마존 리눅스가 실행되며 함수는 임시 컨테이너가 생성되고
그안에서 실행된다.

비실시간 서비스도 존재 ( cron - 1,20분 1시간 등 주기로 몰아서 실행)
queue

autoscaling : 규모가 어느정도 있는 회사에서 필수적으로 사용
CPU사용률등 정해진 조건에 의해 EC2인스턴스를 자동적으로 증감시키는 서비스
WEB 시스템에서 급격한 부하 증가에도 유연하게 대응이 가능

1.( Cloud watch)가 사전에 동작중인 EC2인스턴스들의 평균 CPU사용률을 모니터링하고

2. 지정한 (예약한) CPU사용률보다 높은 사용률이 감지되면
이를 사용자에게 알려주고 지정된 작업을 진행하도록 한다. 일반적으로 지정된 작업이
EC2를 늘리는 것이다.

3. EC2서비스에서 이미지(템플릿)를 이용하여 추가적인 이미지를 생성한다.
최대, 최소 EC2인스턴스 개수를 사전에 지정할수있다


aws 기본 서비스 
- ec2
- RDS(관계형), dynamoDB(NoSQL)
- VPC(Virtual Private Cloud)
- Lambda(computing 서비스) : serverless 서비스
   -> 함수에 의해 특정 서비스를 호출하는 서비스
   -> 특정상황이 되거나 특정 입력이 들어오게 되면 사전에 
         코딩해 둔 함수가 실행되는 서비스이며 서버위에서 실행되지만
         사용자는 서버에 대한 관리 권한이 없는 완전관리형 서비스
         실제 서버는 aws 의 아마존 리눅스가 실행되며 함수는 임시 컨테이너가 생성되고 그 안에서 실행된다. 
   -> 실시간 서비스가 기본이지만, 
         비실시간 서비스도 존재한다.(cron-1분,20분,1시간... 등등 주기로 몰아서 실행)  , queue (작업을 담는 그릇인 큐에 몇개 이상의 작업이 담기면 자동으로 몰아서 처리) 

    -> auto scaling : 규모가 어느정도 있는 회사에서 필수적으로 사용하는 기능
Auto Scaling 은 CPU 사용률 등 사전에 정해진 조건에 의해서 EC2 인스턴스를 자동적으로 증감시키는 서비스이다. Web 시스템에서의 급격한 부하 증가에도 유연하게 대응할 수있다.


      1. CloudWatch 가 사전에 동작중인 ec2 인스턴스들의 평균 CPU 사용률을 모니터링
      2. 지정한(예약한) CPU 사용률보다 높은 사용률이 감지되면 이를 사용자에게 알려주고 지정된 작업을 진행하도록 한다. 일반적으로 지정된 작업이 ec2를 늘리는 것이다. 
      3. ec2 서비스에서 이미지(템플릿)를 이용하여 추가적인 이미지를 생성한다.(최대 ec2 인스턴스를 사전에 지정할 수 있다) 


 S3
다중화된 데이터 스토리지 서비스로써, 업무 시스템에서 파일 서버 같은 것이다. Excel 과 Word 등의 파일을 보관하거나 동영상을 쌓아 두는 것에 적합하다. 객체에 대한 99.9999999999%의 내구성과 최대 99.99%의 가용성을 제공하도록 설계된 신뢰성 높은 온라인 스토리지 이다.

                   nosql(dynamoDB) + s3 -> 잦은 입출력, 동영상등의 자료 등을 처리하기 위하여 두 서비스를 묶어 애플리케이션을 개발하는 경우가 많다.

 CloudFront : 전 세계에 콘텐츠를 전송하기 위한 네트워크 서비스
 일반적인 서비스는 특정 리전에 설치 배포가 되기때문에 원거리에서 서비스 요청시에는 지연이 발생하게 되는데.. 클라우드 프론트를 사용하면 해당 컨텐츠가 전세계 리전의 edge location 에 복사 배포된다.
독립적으로 서비스를 제공하는 것이 아닌 S3 와 같은 서비스를 병행하여 사용해야 한다. 
-> S3 버킷 내에 폴더(디렉토리)를 만들고 동영상을 담은 다음 해당 폴더를 CF 로 배포하면 된다. 
지정되지 않은 웹, 이미지 등은 처음 S3를 만들었던 리전에서 처리하게 된다. 





IAM 엑세스 유형

프로그래밍 방식 엑세스 : IDE (통합개발프로그램) 접속용
AWS Management Console 액세스 : 웹에 AWS console접속가능


이클립스 java ee ide 설치


AWS콘솔에서 IAM > 새로운 유저 생성
엑세스 유형: 프로그래밍 방식 엑세스
권한:
AmazonRDSFullAccess
AmazonEC2FullAccess
AmazonDynamoDBFullAccess

엑세스 키를 엑셀파일(CSV)로 받아서 
Access key ID	
Secret access key
를 확인하기

이후에 Eclipse를 실행하여 해당 키값을 입력하여 AWS와 연동하기

> RDS 를 지정해도 console 권한을 주지않으면 RDS 생성이 불가능



CloudWatch : 모니터링 시스템
CloudWatch 는 AWS에서 제공하는 클라우드 자원과 AWS에서 실행되는 애플리케이션을 감시하는 서비스이다. CloudWatch 의 주요 기능은 다음과 같다.

ec2, rds 를 설치하면 자동으로 로그 확인을 위한 cloudwatch 가 실행된다. 

람다에 대한 기본 -> quicksight


ec2 -> 물리적인 가상화 : instance 에게 가상화된 resource 를 제공
                                             (cpu, ram, disk..)
ecs -> 시스템 레벨 가상화 : 도커

람다 (LAMDA) : 런타임(python, javascript, node.js...) 에서 서비스 제공
각 프로그래밍 언어에서 함수를 작성하여 서비스를 제공
람다입장에서는 물리자원 os에 대한 권리가 필요없음
실제는 amazon linux에서 function이 실행 > 요구되는 서비스를 컨테이너로 만들어 실행되는 형태

장점 : 저렴한 비용 ($/실행횟수), 빠른처리
단점  : 실행시간이 최대 15분을 넘길수 없음 ( 자동 종료됨 ), 보안/관리(모니터링) 측면에서 외부 리소스를 사용 불가능
application의 배포는 특정 VPC에 속하지 않아 이역시 보안적측면에서의 결함 ( 특정 VPC에서 실행되도록 수동으로 지정 가능 )

node.js > 자바스크립트이나 beckend에서 사용가능한 언어

function 에서 aws 의 서비스를 호출하여 사용할 수 있다. 대표적으로 s3, sns, sqs, dynamodb , cloudwatch 등을 사용할 수 있음 

MSA(Micro Service Architecture)
-애플리케이션 개발시 전통적으로는 "폭포수모델" 사용한다. 이는 이전 작업이 끝나면 이를 이어받아 다음 개발자가 추가하는 형식이다. 만약 앞사람이 java 로 개발 했다면 다음 사람도 자바와 연계 가능한 언어를 사용해야한다. 만약 앞사람의 작업이 끝나지 않았다면 다음 사람은 개발을 진행할 수 없는 문제점이 있다. 

MSA 는 전체 프로젝트를 하나하나의 모듈로 나누고 각 개발자가 자신에게 부여된 모듈만을 작성한뒤 최종적으로 이 모듈을 묶기만 하면 된다. 따라서 데이터 전송,수신에 대한 일관성을 유지하기 위해 key: value 형태로 데이터를 주고 받고 동시 작업이 가능하다. 

람다, 도커

트리거 : 방아쇠... 트리거를 설정하고 트리거에 의해 람다가 실행된다.

정책(policy_for_sns) -> 람다에게 해당 정책을 부여한다.(역할)




{
  "test": "안녕하세요 이것은 테스트입니다"
  "number" : "+821020704805"
}




const AWS = require('aws-sdk');
exports.handler = (event, context, callback) => {
  const params = {
    Message: event.text,
    PhoneNumber: event.number
  };

  const publishTextPromise = new AWS.SNS({ apiVersion: '2010-03-31', region: 'ap-northeast-1'}).publish(params).promise();

  publishTextPromise.then(
    function(data) {
      callback(null, "MessageID is " + data.MessageID);
    }).catch(
      function(err) {
        callback(err);
      });
};